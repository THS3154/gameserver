// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DBProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DBProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DBProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DBProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DBProtocol_2eproto;
namespace Protocol {
class C_DB_DELETEINVENTORY;
struct C_DB_DELETEINVENTORYDefaultTypeInternal;
extern C_DB_DELETEINVENTORYDefaultTypeInternal _C_DB_DELETEINVENTORY_default_instance_;
class C_DB_EQUIPMENT;
struct C_DB_EQUIPMENTDefaultTypeInternal;
extern C_DB_EQUIPMENTDefaultTypeInternal _C_DB_EQUIPMENT_default_instance_;
class C_DB_GAINEXP;
struct C_DB_GAINEXPDefaultTypeInternal;
extern C_DB_GAINEXPDefaultTypeInternal _C_DB_GAINEXP_default_instance_;
class C_DB_GAINGOLD;
struct C_DB_GAINGOLDDefaultTypeInternal;
extern C_DB_GAINGOLDDefaultTypeInternal _C_DB_GAINGOLD_default_instance_;
class C_DB_INSERTINVENTORY;
struct C_DB_INSERTINVENTORYDefaultTypeInternal;
extern C_DB_INSERTINVENTORYDefaultTypeInternal _C_DB_INSERTINVENTORY_default_instance_;
class C_DB_LOADEQUIPMENT;
struct C_DB_LOADEQUIPMENTDefaultTypeInternal;
extern C_DB_LOADEQUIPMENTDefaultTypeInternal _C_DB_LOADEQUIPMENT_default_instance_;
class C_DB_LOADINVENTORY;
struct C_DB_LOADINVENTORYDefaultTypeInternal;
extern C_DB_LOADINVENTORYDefaultTypeInternal _C_DB_LOADINVENTORY_default_instance_;
class C_DB_LOGIN;
struct C_DB_LOGINDefaultTypeInternal;
extern C_DB_LOGINDefaultTypeInternal _C_DB_LOGIN_default_instance_;
class C_DB_PING;
struct C_DB_PINGDefaultTypeInternal;
extern C_DB_PINGDefaultTypeInternal _C_DB_PING_default_instance_;
class C_DB_UPDATEINVENTORY;
struct C_DB_UPDATEINVENTORYDefaultTypeInternal;
extern C_DB_UPDATEINVENTORYDefaultTypeInternal _C_DB_UPDATEINVENTORY_default_instance_;
class C_DB_UPDATEPOS;
struct C_DB_UPDATEPOSDefaultTypeInternal;
extern C_DB_UPDATEPOSDefaultTypeInternal _C_DB_UPDATEPOS_default_instance_;
class S_DB_DELETEINVENTORY;
struct S_DB_DELETEINVENTORYDefaultTypeInternal;
extern S_DB_DELETEINVENTORYDefaultTypeInternal _S_DB_DELETEINVENTORY_default_instance_;
class S_DB_EQUIPMENT;
struct S_DB_EQUIPMENTDefaultTypeInternal;
extern S_DB_EQUIPMENTDefaultTypeInternal _S_DB_EQUIPMENT_default_instance_;
class S_DB_GAINEXP;
struct S_DB_GAINEXPDefaultTypeInternal;
extern S_DB_GAINEXPDefaultTypeInternal _S_DB_GAINEXP_default_instance_;
class S_DB_GAINGOLD;
struct S_DB_GAINGOLDDefaultTypeInternal;
extern S_DB_GAINGOLDDefaultTypeInternal _S_DB_GAINGOLD_default_instance_;
class S_DB_INSERTINVENTORY;
struct S_DB_INSERTINVENTORYDefaultTypeInternal;
extern S_DB_INSERTINVENTORYDefaultTypeInternal _S_DB_INSERTINVENTORY_default_instance_;
class S_DB_LOADEQUIPMENT;
struct S_DB_LOADEQUIPMENTDefaultTypeInternal;
extern S_DB_LOADEQUIPMENTDefaultTypeInternal _S_DB_LOADEQUIPMENT_default_instance_;
class S_DB_LOADINVENTORY;
struct S_DB_LOADINVENTORYDefaultTypeInternal;
extern S_DB_LOADINVENTORYDefaultTypeInternal _S_DB_LOADINVENTORY_default_instance_;
class S_DB_LOGIN;
struct S_DB_LOGINDefaultTypeInternal;
extern S_DB_LOGINDefaultTypeInternal _S_DB_LOGIN_default_instance_;
class S_DB_PING;
struct S_DB_PINGDefaultTypeInternal;
extern S_DB_PINGDefaultTypeInternal _S_DB_PING_default_instance_;
class S_DB_UPDATEINVENTORY;
struct S_DB_UPDATEINVENTORYDefaultTypeInternal;
extern S_DB_UPDATEINVENTORYDefaultTypeInternal _S_DB_UPDATEINVENTORY_default_instance_;
class S_DB_UPDATEPOS;
struct S_DB_UPDATEPOSDefaultTypeInternal;
extern S_DB_UPDATEPOSDefaultTypeInternal _S_DB_UPDATEPOS_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_DB_DELETEINVENTORY* Arena::CreateMaybeMessage<::Protocol::C_DB_DELETEINVENTORY>(Arena*);
template<> ::Protocol::C_DB_EQUIPMENT* Arena::CreateMaybeMessage<::Protocol::C_DB_EQUIPMENT>(Arena*);
template<> ::Protocol::C_DB_GAINEXP* Arena::CreateMaybeMessage<::Protocol::C_DB_GAINEXP>(Arena*);
template<> ::Protocol::C_DB_GAINGOLD* Arena::CreateMaybeMessage<::Protocol::C_DB_GAINGOLD>(Arena*);
template<> ::Protocol::C_DB_INSERTINVENTORY* Arena::CreateMaybeMessage<::Protocol::C_DB_INSERTINVENTORY>(Arena*);
template<> ::Protocol::C_DB_LOADEQUIPMENT* Arena::CreateMaybeMessage<::Protocol::C_DB_LOADEQUIPMENT>(Arena*);
template<> ::Protocol::C_DB_LOADINVENTORY* Arena::CreateMaybeMessage<::Protocol::C_DB_LOADINVENTORY>(Arena*);
template<> ::Protocol::C_DB_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_DB_LOGIN>(Arena*);
template<> ::Protocol::C_DB_PING* Arena::CreateMaybeMessage<::Protocol::C_DB_PING>(Arena*);
template<> ::Protocol::C_DB_UPDATEINVENTORY* Arena::CreateMaybeMessage<::Protocol::C_DB_UPDATEINVENTORY>(Arena*);
template<> ::Protocol::C_DB_UPDATEPOS* Arena::CreateMaybeMessage<::Protocol::C_DB_UPDATEPOS>(Arena*);
template<> ::Protocol::S_DB_DELETEINVENTORY* Arena::CreateMaybeMessage<::Protocol::S_DB_DELETEINVENTORY>(Arena*);
template<> ::Protocol::S_DB_EQUIPMENT* Arena::CreateMaybeMessage<::Protocol::S_DB_EQUIPMENT>(Arena*);
template<> ::Protocol::S_DB_GAINEXP* Arena::CreateMaybeMessage<::Protocol::S_DB_GAINEXP>(Arena*);
template<> ::Protocol::S_DB_GAINGOLD* Arena::CreateMaybeMessage<::Protocol::S_DB_GAINGOLD>(Arena*);
template<> ::Protocol::S_DB_INSERTINVENTORY* Arena::CreateMaybeMessage<::Protocol::S_DB_INSERTINVENTORY>(Arena*);
template<> ::Protocol::S_DB_LOADEQUIPMENT* Arena::CreateMaybeMessage<::Protocol::S_DB_LOADEQUIPMENT>(Arena*);
template<> ::Protocol::S_DB_LOADINVENTORY* Arena::CreateMaybeMessage<::Protocol::S_DB_LOADINVENTORY>(Arena*);
template<> ::Protocol::S_DB_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_DB_LOGIN>(Arena*);
template<> ::Protocol::S_DB_PING* Arena::CreateMaybeMessage<::Protocol::S_DB_PING>(Arena*);
template<> ::Protocol::S_DB_UPDATEINVENTORY* Arena::CreateMaybeMessage<::Protocol::S_DB_UPDATEINVENTORY>(Arena*);
template<> ::Protocol::S_DB_UPDATEPOS* Arena::CreateMaybeMessage<::Protocol::S_DB_UPDATEPOS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_DB_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_LOGIN) */ {
 public:
  inline C_DB_LOGIN() : C_DB_LOGIN(nullptr) {}
  ~C_DB_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C_DB_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_LOGIN(const C_DB_LOGIN& from);
  C_DB_LOGIN(C_DB_LOGIN&& from) noexcept
    : C_DB_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_DB_LOGIN& operator=(const C_DB_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_LOGIN& operator=(C_DB_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_DB_LOGIN*>(
               &_C_DB_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_DB_LOGIN& a, C_DB_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_LOGIN";
  }
  protected:
  explicit C_DB_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kRequestidFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // uint64 requestid = 3;
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  uint64_t requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DB_LOGIN) */ {
 public:
  inline S_DB_LOGIN() : S_DB_LOGIN(nullptr) {}
  ~S_DB_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_DB_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_LOGIN(const S_DB_LOGIN& from);
  S_DB_LOGIN(S_DB_LOGIN&& from) noexcept
    : S_DB_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_DB_LOGIN& operator=(const S_DB_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_LOGIN& operator=(S_DB_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_DB_LOGIN*>(
               &_S_DB_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_DB_LOGIN& a, S_DB_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DB_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_DB_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DB_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_LOGIN";
  }
  protected:
  explicit S_DB_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectinfosFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kErrortypeFieldNumber = 3,
    kRequestidFieldNumber = 4,
    kDbidFieldNumber = 5,
  };
  // repeated .Protocol.ObjectInfo objectinfos = 2;
  int objectinfos_size() const;
  private:
  int _internal_objectinfos_size() const;
  public:
  void clear_objectinfos();
  ::Protocol::ObjectInfo* mutable_objectinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_objectinfos();
  private:
  const ::Protocol::ObjectInfo& _internal_objectinfos(int index) const;
  ::Protocol::ObjectInfo* _internal_add_objectinfos();
  public:
  const ::Protocol::ObjectInfo& objectinfos(int index) const;
  ::Protocol::ObjectInfo* add_objectinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      objectinfos() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.LoginMessage errortype = 3;
  void clear_errortype();
  ::Protocol::LoginMessage errortype() const;
  void set_errortype(::Protocol::LoginMessage value);
  private:
  ::Protocol::LoginMessage _internal_errortype() const;
  void _internal_set_errortype(::Protocol::LoginMessage value);
  public:

  // uint64 requestid = 4;
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // uint64 dbid = 5;
  void clear_dbid();
  uint64_t dbid() const;
  void set_dbid(uint64_t value);
  private:
  uint64_t _internal_dbid() const;
  void _internal_set_dbid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > objectinfos_;
  bool success_;
  int errortype_;
  uint64_t requestid_;
  uint64_t dbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_GAINEXP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_GAINEXP) */ {
 public:
  inline C_DB_GAINEXP() : C_DB_GAINEXP(nullptr) {}
  ~C_DB_GAINEXP() override;
  explicit PROTOBUF_CONSTEXPR C_DB_GAINEXP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_GAINEXP(const C_DB_GAINEXP& from);
  C_DB_GAINEXP(C_DB_GAINEXP&& from) noexcept
    : C_DB_GAINEXP() {
    *this = ::std::move(from);
  }

  inline C_DB_GAINEXP& operator=(const C_DB_GAINEXP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_GAINEXP& operator=(C_DB_GAINEXP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_GAINEXP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_GAINEXP* internal_default_instance() {
    return reinterpret_cast<const C_DB_GAINEXP*>(
               &_C_DB_GAINEXP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_DB_GAINEXP& a, C_DB_GAINEXP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_GAINEXP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_GAINEXP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_GAINEXP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_GAINEXP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_GAINEXP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_GAINEXP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_GAINEXP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_GAINEXP";
  }
  protected:
  explicit C_DB_GAINEXP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacteridFieldNumber = 1,
    kLevelFieldNumber = 2,
    kNowexpFieldNumber = 3,
  };
  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // uint64 level = 2;
  void clear_level();
  uint64_t level() const;
  void set_level(uint64_t value);
  private:
  uint64_t _internal_level() const;
  void _internal_set_level(uint64_t value);
  public:

  // uint64 nowexp = 3;
  void clear_nowexp();
  uint64_t nowexp() const;
  void set_nowexp(uint64_t value);
  private:
  uint64_t _internal_nowexp() const;
  void _internal_set_nowexp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_GAINEXP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t characterid_;
  uint64_t level_;
  uint64_t nowexp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_GAINEXP final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_GAINEXP) */ {
 public:
  inline S_DB_GAINEXP() : S_DB_GAINEXP(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_GAINEXP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_GAINEXP(const S_DB_GAINEXP& from);
  S_DB_GAINEXP(S_DB_GAINEXP&& from) noexcept
    : S_DB_GAINEXP() {
    *this = ::std::move(from);
  }

  inline S_DB_GAINEXP& operator=(const S_DB_GAINEXP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_GAINEXP& operator=(S_DB_GAINEXP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_GAINEXP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_GAINEXP* internal_default_instance() {
    return reinterpret_cast<const S_DB_GAINEXP*>(
               &_S_DB_GAINEXP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_DB_GAINEXP& a, S_DB_GAINEXP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_GAINEXP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_GAINEXP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_GAINEXP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_GAINEXP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_GAINEXP& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_GAINEXP& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_GAINEXP";
  }
  protected:
  explicit S_DB_GAINEXP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_GAINEXP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_GAINGOLD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_GAINGOLD) */ {
 public:
  inline C_DB_GAINGOLD() : C_DB_GAINGOLD(nullptr) {}
  ~C_DB_GAINGOLD() override;
  explicit PROTOBUF_CONSTEXPR C_DB_GAINGOLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_GAINGOLD(const C_DB_GAINGOLD& from);
  C_DB_GAINGOLD(C_DB_GAINGOLD&& from) noexcept
    : C_DB_GAINGOLD() {
    *this = ::std::move(from);
  }

  inline C_DB_GAINGOLD& operator=(const C_DB_GAINGOLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_GAINGOLD& operator=(C_DB_GAINGOLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_GAINGOLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_GAINGOLD* internal_default_instance() {
    return reinterpret_cast<const C_DB_GAINGOLD*>(
               &_C_DB_GAINGOLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_DB_GAINGOLD& a, C_DB_GAINGOLD& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_GAINGOLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_GAINGOLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_GAINGOLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_GAINGOLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_GAINGOLD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_GAINGOLD& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_GAINGOLD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_GAINGOLD";
  }
  protected:
  explicit C_DB_GAINGOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacteridFieldNumber = 1,
    kGoldFieldNumber = 2,
    kLogtypeFieldNumber = 3,
  };
  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // int32 gold = 2;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // int32 logtype = 3;
  void clear_logtype();
  int32_t logtype() const;
  void set_logtype(int32_t value);
  private:
  int32_t _internal_logtype() const;
  void _internal_set_logtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_GAINGOLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t characterid_;
  int32_t gold_;
  int32_t logtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_GAINGOLD final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_GAINGOLD) */ {
 public:
  inline S_DB_GAINGOLD() : S_DB_GAINGOLD(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_GAINGOLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_GAINGOLD(const S_DB_GAINGOLD& from);
  S_DB_GAINGOLD(S_DB_GAINGOLD&& from) noexcept
    : S_DB_GAINGOLD() {
    *this = ::std::move(from);
  }

  inline S_DB_GAINGOLD& operator=(const S_DB_GAINGOLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_GAINGOLD& operator=(S_DB_GAINGOLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_GAINGOLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_GAINGOLD* internal_default_instance() {
    return reinterpret_cast<const S_DB_GAINGOLD*>(
               &_S_DB_GAINGOLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_DB_GAINGOLD& a, S_DB_GAINGOLD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_GAINGOLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_GAINGOLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_GAINGOLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_GAINGOLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_GAINGOLD& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_GAINGOLD& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_GAINGOLD";
  }
  protected:
  explicit S_DB_GAINGOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_GAINGOLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_LOADEQUIPMENT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_LOADEQUIPMENT) */ {
 public:
  inline C_DB_LOADEQUIPMENT() : C_DB_LOADEQUIPMENT(nullptr) {}
  ~C_DB_LOADEQUIPMENT() override;
  explicit PROTOBUF_CONSTEXPR C_DB_LOADEQUIPMENT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_LOADEQUIPMENT(const C_DB_LOADEQUIPMENT& from);
  C_DB_LOADEQUIPMENT(C_DB_LOADEQUIPMENT&& from) noexcept
    : C_DB_LOADEQUIPMENT() {
    *this = ::std::move(from);
  }

  inline C_DB_LOADEQUIPMENT& operator=(const C_DB_LOADEQUIPMENT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_LOADEQUIPMENT& operator=(C_DB_LOADEQUIPMENT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_LOADEQUIPMENT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_LOADEQUIPMENT* internal_default_instance() {
    return reinterpret_cast<const C_DB_LOADEQUIPMENT*>(
               &_C_DB_LOADEQUIPMENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_DB_LOADEQUIPMENT& a, C_DB_LOADEQUIPMENT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_LOADEQUIPMENT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_LOADEQUIPMENT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_LOADEQUIPMENT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_LOADEQUIPMENT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_LOADEQUIPMENT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_LOADEQUIPMENT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_LOADEQUIPMENT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_LOADEQUIPMENT";
  }
  protected:
  explicit C_DB_LOADEQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacteridFieldNumber = 1,
    kRequestidFieldNumber = 2,
  };
  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // uint64 requestid = 2;
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_LOADEQUIPMENT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t characterid_;
  uint64_t requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_LOADEQUIPMENT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DB_LOADEQUIPMENT) */ {
 public:
  inline S_DB_LOADEQUIPMENT() : S_DB_LOADEQUIPMENT(nullptr) {}
  ~S_DB_LOADEQUIPMENT() override;
  explicit PROTOBUF_CONSTEXPR S_DB_LOADEQUIPMENT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_LOADEQUIPMENT(const S_DB_LOADEQUIPMENT& from);
  S_DB_LOADEQUIPMENT(S_DB_LOADEQUIPMENT&& from) noexcept
    : S_DB_LOADEQUIPMENT() {
    *this = ::std::move(from);
  }

  inline S_DB_LOADEQUIPMENT& operator=(const S_DB_LOADEQUIPMENT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_LOADEQUIPMENT& operator=(S_DB_LOADEQUIPMENT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_LOADEQUIPMENT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_LOADEQUIPMENT* internal_default_instance() {
    return reinterpret_cast<const S_DB_LOADEQUIPMENT*>(
               &_S_DB_LOADEQUIPMENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_DB_LOADEQUIPMENT& a, S_DB_LOADEQUIPMENT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_LOADEQUIPMENT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_LOADEQUIPMENT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_LOADEQUIPMENT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_LOADEQUIPMENT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DB_LOADEQUIPMENT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_DB_LOADEQUIPMENT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DB_LOADEQUIPMENT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_LOADEQUIPMENT";
  }
  protected:
  explicit S_DB_LOADEQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kRequestidFieldNumber = 1,
  };
  // repeated .Protocol.ItemData items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
      mutable_items();
  private:
  const ::Protocol::ItemData& _internal_items(int index) const;
  ::Protocol::ItemData* _internal_add_items();
  public:
  const ::Protocol::ItemData& items(int index) const;
  ::Protocol::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
      items() const;

  // uint64 requestid = 1;
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_LOADEQUIPMENT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData > items_;
  uint64_t requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_LOADINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_LOADINVENTORY) */ {
 public:
  inline C_DB_LOADINVENTORY() : C_DB_LOADINVENTORY(nullptr) {}
  ~C_DB_LOADINVENTORY() override;
  explicit PROTOBUF_CONSTEXPR C_DB_LOADINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_LOADINVENTORY(const C_DB_LOADINVENTORY& from);
  C_DB_LOADINVENTORY(C_DB_LOADINVENTORY&& from) noexcept
    : C_DB_LOADINVENTORY() {
    *this = ::std::move(from);
  }

  inline C_DB_LOADINVENTORY& operator=(const C_DB_LOADINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_LOADINVENTORY& operator=(C_DB_LOADINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_LOADINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_LOADINVENTORY* internal_default_instance() {
    return reinterpret_cast<const C_DB_LOADINVENTORY*>(
               &_C_DB_LOADINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_DB_LOADINVENTORY& a, C_DB_LOADINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_LOADINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_LOADINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_LOADINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_LOADINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_LOADINVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_LOADINVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_LOADINVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_LOADINVENTORY";
  }
  protected:
  explicit C_DB_LOADINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacteridFieldNumber = 1,
    kRequestidFieldNumber = 2,
  };
  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // uint64 requestid = 2;
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_LOADINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t characterid_;
  uint64_t requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_LOADINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DB_LOADINVENTORY) */ {
 public:
  inline S_DB_LOADINVENTORY() : S_DB_LOADINVENTORY(nullptr) {}
  ~S_DB_LOADINVENTORY() override;
  explicit PROTOBUF_CONSTEXPR S_DB_LOADINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_LOADINVENTORY(const S_DB_LOADINVENTORY& from);
  S_DB_LOADINVENTORY(S_DB_LOADINVENTORY&& from) noexcept
    : S_DB_LOADINVENTORY() {
    *this = ::std::move(from);
  }

  inline S_DB_LOADINVENTORY& operator=(const S_DB_LOADINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_LOADINVENTORY& operator=(S_DB_LOADINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_LOADINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_LOADINVENTORY* internal_default_instance() {
    return reinterpret_cast<const S_DB_LOADINVENTORY*>(
               &_S_DB_LOADINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_DB_LOADINVENTORY& a, S_DB_LOADINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_LOADINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_LOADINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_LOADINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_LOADINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DB_LOADINVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_DB_LOADINVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DB_LOADINVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_LOADINVENTORY";
  }
  protected:
  explicit S_DB_LOADINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kRequestidFieldNumber = 1,
  };
  // repeated .Protocol.ItemData items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
      mutable_items();
  private:
  const ::Protocol::ItemData& _internal_items(int index) const;
  ::Protocol::ItemData* _internal_add_items();
  public:
  const ::Protocol::ItemData& items(int index) const;
  ::Protocol::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
      items() const;

  // uint64 requestid = 1;
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_LOADINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData > items_;
  uint64_t requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_DELETEINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_DELETEINVENTORY) */ {
 public:
  inline C_DB_DELETEINVENTORY() : C_DB_DELETEINVENTORY(nullptr) {}
  ~C_DB_DELETEINVENTORY() override;
  explicit PROTOBUF_CONSTEXPR C_DB_DELETEINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_DELETEINVENTORY(const C_DB_DELETEINVENTORY& from);
  C_DB_DELETEINVENTORY(C_DB_DELETEINVENTORY&& from) noexcept
    : C_DB_DELETEINVENTORY() {
    *this = ::std::move(from);
  }

  inline C_DB_DELETEINVENTORY& operator=(const C_DB_DELETEINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_DELETEINVENTORY& operator=(C_DB_DELETEINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_DELETEINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_DELETEINVENTORY* internal_default_instance() {
    return reinterpret_cast<const C_DB_DELETEINVENTORY*>(
               &_C_DB_DELETEINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_DB_DELETEINVENTORY& a, C_DB_DELETEINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_DELETEINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_DELETEINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_DELETEINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_DELETEINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_DELETEINVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_DELETEINVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_DELETEINVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_DELETEINVENTORY";
  }
  protected:
  explicit C_DB_DELETEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceidFieldNumber = 1,
  };
  // uint64 instanceid = 1;
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_DELETEINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_DELETEINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_DELETEINVENTORY) */ {
 public:
  inline S_DB_DELETEINVENTORY() : S_DB_DELETEINVENTORY(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_DELETEINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_DELETEINVENTORY(const S_DB_DELETEINVENTORY& from);
  S_DB_DELETEINVENTORY(S_DB_DELETEINVENTORY&& from) noexcept
    : S_DB_DELETEINVENTORY() {
    *this = ::std::move(from);
  }

  inline S_DB_DELETEINVENTORY& operator=(const S_DB_DELETEINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_DELETEINVENTORY& operator=(S_DB_DELETEINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_DELETEINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_DELETEINVENTORY* internal_default_instance() {
    return reinterpret_cast<const S_DB_DELETEINVENTORY*>(
               &_S_DB_DELETEINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_DB_DELETEINVENTORY& a, S_DB_DELETEINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_DELETEINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_DELETEINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_DELETEINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_DELETEINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_DELETEINVENTORY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_DELETEINVENTORY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_DELETEINVENTORY";
  }
  protected:
  explicit S_DB_DELETEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_DELETEINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_UPDATEINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_UPDATEINVENTORY) */ {
 public:
  inline C_DB_UPDATEINVENTORY() : C_DB_UPDATEINVENTORY(nullptr) {}
  ~C_DB_UPDATEINVENTORY() override;
  explicit PROTOBUF_CONSTEXPR C_DB_UPDATEINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_UPDATEINVENTORY(const C_DB_UPDATEINVENTORY& from);
  C_DB_UPDATEINVENTORY(C_DB_UPDATEINVENTORY&& from) noexcept
    : C_DB_UPDATEINVENTORY() {
    *this = ::std::move(from);
  }

  inline C_DB_UPDATEINVENTORY& operator=(const C_DB_UPDATEINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_UPDATEINVENTORY& operator=(C_DB_UPDATEINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_UPDATEINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_UPDATEINVENTORY* internal_default_instance() {
    return reinterpret_cast<const C_DB_UPDATEINVENTORY*>(
               &_C_DB_UPDATEINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_DB_UPDATEINVENTORY& a, C_DB_UPDATEINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_UPDATEINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_UPDATEINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_UPDATEINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_UPDATEINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_UPDATEINVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_UPDATEINVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_UPDATEINVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_UPDATEINVENTORY";
  }
  protected:
  explicit C_DB_UPDATEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kCharacteridFieldNumber = 1,
  };
  // repeated .Protocol.ItemData items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
      mutable_items();
  private:
  const ::Protocol::ItemData& _internal_items(int index) const;
  ::Protocol::ItemData* _internal_add_items();
  public:
  const ::Protocol::ItemData& items(int index) const;
  ::Protocol::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
      items() const;

  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_UPDATEINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData > items_;
  uint64_t characterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_UPDATEINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_UPDATEINVENTORY) */ {
 public:
  inline S_DB_UPDATEINVENTORY() : S_DB_UPDATEINVENTORY(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_UPDATEINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_UPDATEINVENTORY(const S_DB_UPDATEINVENTORY& from);
  S_DB_UPDATEINVENTORY(S_DB_UPDATEINVENTORY&& from) noexcept
    : S_DB_UPDATEINVENTORY() {
    *this = ::std::move(from);
  }

  inline S_DB_UPDATEINVENTORY& operator=(const S_DB_UPDATEINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_UPDATEINVENTORY& operator=(S_DB_UPDATEINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_UPDATEINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_UPDATEINVENTORY* internal_default_instance() {
    return reinterpret_cast<const S_DB_UPDATEINVENTORY*>(
               &_S_DB_UPDATEINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_DB_UPDATEINVENTORY& a, S_DB_UPDATEINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_UPDATEINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_UPDATEINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_UPDATEINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_UPDATEINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_UPDATEINVENTORY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_UPDATEINVENTORY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_UPDATEINVENTORY";
  }
  protected:
  explicit S_DB_UPDATEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_UPDATEINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_INSERTINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_INSERTINVENTORY) */ {
 public:
  inline C_DB_INSERTINVENTORY() : C_DB_INSERTINVENTORY(nullptr) {}
  ~C_DB_INSERTINVENTORY() override;
  explicit PROTOBUF_CONSTEXPR C_DB_INSERTINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_INSERTINVENTORY(const C_DB_INSERTINVENTORY& from);
  C_DB_INSERTINVENTORY(C_DB_INSERTINVENTORY&& from) noexcept
    : C_DB_INSERTINVENTORY() {
    *this = ::std::move(from);
  }

  inline C_DB_INSERTINVENTORY& operator=(const C_DB_INSERTINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_INSERTINVENTORY& operator=(C_DB_INSERTINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_INSERTINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_INSERTINVENTORY* internal_default_instance() {
    return reinterpret_cast<const C_DB_INSERTINVENTORY*>(
               &_C_DB_INSERTINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_DB_INSERTINVENTORY& a, C_DB_INSERTINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_INSERTINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_INSERTINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_INSERTINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_INSERTINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_INSERTINVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_INSERTINVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_INSERTINVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_INSERTINVENTORY";
  }
  protected:
  explicit C_DB_INSERTINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kCharacteridFieldNumber = 1,
  };
  // repeated .Protocol.ItemData items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
      mutable_items();
  private:
  const ::Protocol::ItemData& _internal_items(int index) const;
  ::Protocol::ItemData* _internal_add_items();
  public:
  const ::Protocol::ItemData& items(int index) const;
  ::Protocol::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
      items() const;

  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_INSERTINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData > items_;
  uint64_t characterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_INSERTINVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_INSERTINVENTORY) */ {
 public:
  inline S_DB_INSERTINVENTORY() : S_DB_INSERTINVENTORY(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_INSERTINVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_INSERTINVENTORY(const S_DB_INSERTINVENTORY& from);
  S_DB_INSERTINVENTORY(S_DB_INSERTINVENTORY&& from) noexcept
    : S_DB_INSERTINVENTORY() {
    *this = ::std::move(from);
  }

  inline S_DB_INSERTINVENTORY& operator=(const S_DB_INSERTINVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_INSERTINVENTORY& operator=(S_DB_INSERTINVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_INSERTINVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_INSERTINVENTORY* internal_default_instance() {
    return reinterpret_cast<const S_DB_INSERTINVENTORY*>(
               &_S_DB_INSERTINVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_DB_INSERTINVENTORY& a, S_DB_INSERTINVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_INSERTINVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_INSERTINVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_INSERTINVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_INSERTINVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_INSERTINVENTORY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_INSERTINVENTORY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_INSERTINVENTORY";
  }
  protected:
  explicit S_DB_INSERTINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_INSERTINVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_EQUIPMENT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_EQUIPMENT) */ {
 public:
  inline C_DB_EQUIPMENT() : C_DB_EQUIPMENT(nullptr) {}
  ~C_DB_EQUIPMENT() override;
  explicit PROTOBUF_CONSTEXPR C_DB_EQUIPMENT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_EQUIPMENT(const C_DB_EQUIPMENT& from);
  C_DB_EQUIPMENT(C_DB_EQUIPMENT&& from) noexcept
    : C_DB_EQUIPMENT() {
    *this = ::std::move(from);
  }

  inline C_DB_EQUIPMENT& operator=(const C_DB_EQUIPMENT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_EQUIPMENT& operator=(C_DB_EQUIPMENT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_EQUIPMENT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_EQUIPMENT* internal_default_instance() {
    return reinterpret_cast<const C_DB_EQUIPMENT*>(
               &_C_DB_EQUIPMENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_DB_EQUIPMENT& a, C_DB_EQUIPMENT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_EQUIPMENT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_EQUIPMENT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_EQUIPMENT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_EQUIPMENT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_EQUIPMENT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_EQUIPMENT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_EQUIPMENT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_EQUIPMENT";
  }
  protected:
  explicit C_DB_EQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kCharacteridFieldNumber = 1,
  };
  // repeated .Protocol.Equipment items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::Equipment* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Equipment >*
      mutable_items();
  private:
  const ::Protocol::Equipment& _internal_items(int index) const;
  ::Protocol::Equipment* _internal_add_items();
  public:
  const ::Protocol::Equipment& items(int index) const;
  ::Protocol::Equipment* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Equipment >&
      items() const;

  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_EQUIPMENT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Equipment > items_;
  uint64_t characterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_EQUIPMENT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_EQUIPMENT) */ {
 public:
  inline S_DB_EQUIPMENT() : S_DB_EQUIPMENT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_EQUIPMENT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_EQUIPMENT(const S_DB_EQUIPMENT& from);
  S_DB_EQUIPMENT(S_DB_EQUIPMENT&& from) noexcept
    : S_DB_EQUIPMENT() {
    *this = ::std::move(from);
  }

  inline S_DB_EQUIPMENT& operator=(const S_DB_EQUIPMENT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_EQUIPMENT& operator=(S_DB_EQUIPMENT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_EQUIPMENT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_EQUIPMENT* internal_default_instance() {
    return reinterpret_cast<const S_DB_EQUIPMENT*>(
               &_S_DB_EQUIPMENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_DB_EQUIPMENT& a, S_DB_EQUIPMENT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_EQUIPMENT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_EQUIPMENT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_EQUIPMENT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_EQUIPMENT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_EQUIPMENT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_EQUIPMENT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_EQUIPMENT";
  }
  protected:
  explicit S_DB_EQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_EQUIPMENT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_UPDATEPOS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_UPDATEPOS) */ {
 public:
  inline C_DB_UPDATEPOS() : C_DB_UPDATEPOS(nullptr) {}
  ~C_DB_UPDATEPOS() override;
  explicit PROTOBUF_CONSTEXPR C_DB_UPDATEPOS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_UPDATEPOS(const C_DB_UPDATEPOS& from);
  C_DB_UPDATEPOS(C_DB_UPDATEPOS&& from) noexcept
    : C_DB_UPDATEPOS() {
    *this = ::std::move(from);
  }

  inline C_DB_UPDATEPOS& operator=(const C_DB_UPDATEPOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_UPDATEPOS& operator=(C_DB_UPDATEPOS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_UPDATEPOS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_UPDATEPOS* internal_default_instance() {
    return reinterpret_cast<const C_DB_UPDATEPOS*>(
               &_C_DB_UPDATEPOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_DB_UPDATEPOS& a, C_DB_UPDATEPOS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_UPDATEPOS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_UPDATEPOS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_UPDATEPOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_UPDATEPOS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_UPDATEPOS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_UPDATEPOS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_UPDATEPOS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_UPDATEPOS";
  }
  protected:
  explicit C_DB_UPDATEPOS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectinfoFieldNumber = 2,
    kCharacteridFieldNumber = 1,
  };
  // .Protocol.ObjectInfo objectinfo = 2;
  bool has_objectinfo() const;
  private:
  bool _internal_has_objectinfo() const;
  public:
  void clear_objectinfo();
  const ::Protocol::ObjectInfo& objectinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_objectinfo();
  ::Protocol::ObjectInfo* mutable_objectinfo();
  void set_allocated_objectinfo(::Protocol::ObjectInfo* objectinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_objectinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_objectinfo();
  public:
  void unsafe_arena_set_allocated_objectinfo(
      ::Protocol::ObjectInfo* objectinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_objectinfo();

  // uint64 characterid = 1;
  void clear_characterid();
  uint64_t characterid() const;
  void set_characterid(uint64_t value);
  private:
  uint64_t _internal_characterid() const;
  void _internal_set_characterid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_UPDATEPOS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ObjectInfo* objectinfo_;
  uint64_t characterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_UPDATEPOS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_DB_UPDATEPOS) */ {
 public:
  inline S_DB_UPDATEPOS() : S_DB_UPDATEPOS(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_DB_UPDATEPOS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_UPDATEPOS(const S_DB_UPDATEPOS& from);
  S_DB_UPDATEPOS(S_DB_UPDATEPOS&& from) noexcept
    : S_DB_UPDATEPOS() {
    *this = ::std::move(from);
  }

  inline S_DB_UPDATEPOS& operator=(const S_DB_UPDATEPOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_UPDATEPOS& operator=(S_DB_UPDATEPOS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_UPDATEPOS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_UPDATEPOS* internal_default_instance() {
    return reinterpret_cast<const S_DB_UPDATEPOS*>(
               &_S_DB_UPDATEPOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_DB_UPDATEPOS& a, S_DB_UPDATEPOS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_UPDATEPOS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_UPDATEPOS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_UPDATEPOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_UPDATEPOS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_DB_UPDATEPOS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_DB_UPDATEPOS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_UPDATEPOS";
  }
  protected:
  explicit S_DB_UPDATEPOS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_UPDATEPOS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_DB_PING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DB_PING) */ {
 public:
  inline C_DB_PING() : C_DB_PING(nullptr) {}
  ~C_DB_PING() override;
  explicit PROTOBUF_CONSTEXPR C_DB_PING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DB_PING(const C_DB_PING& from);
  C_DB_PING(C_DB_PING&& from) noexcept
    : C_DB_PING() {
    *this = ::std::move(from);
  }

  inline C_DB_PING& operator=(const C_DB_PING& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DB_PING& operator=(C_DB_PING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DB_PING& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DB_PING* internal_default_instance() {
    return reinterpret_cast<const C_DB_PING*>(
               &_C_DB_PING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_DB_PING& a, C_DB_PING& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DB_PING* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DB_PING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DB_PING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DB_PING>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DB_PING& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_DB_PING& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DB_PING* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DB_PING";
  }
  protected:
  explicit C_DB_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DB_PING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_DB_PING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DB_PING) */ {
 public:
  inline S_DB_PING() : S_DB_PING(nullptr) {}
  ~S_DB_PING() override;
  explicit PROTOBUF_CONSTEXPR S_DB_PING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DB_PING(const S_DB_PING& from);
  S_DB_PING(S_DB_PING&& from) noexcept
    : S_DB_PING() {
    *this = ::std::move(from);
  }

  inline S_DB_PING& operator=(const S_DB_PING& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DB_PING& operator=(S_DB_PING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DB_PING& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DB_PING* internal_default_instance() {
    return reinterpret_cast<const S_DB_PING*>(
               &_S_DB_PING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_DB_PING& a, S_DB_PING& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DB_PING* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DB_PING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DB_PING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DB_PING>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DB_PING& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_DB_PING& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DB_PING* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DB_PING";
  }
  protected:
  explicit S_DB_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DB_PING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_DB_LOGIN

// string id = 1;
inline void C_DB_LOGIN::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_DB_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOGIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_DB_LOGIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOGIN.id)
}
inline std::string* C_DB_LOGIN::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_DB_LOGIN.id)
  return _s;
}
inline const std::string& C_DB_LOGIN::_internal_id() const {
  return id_.Get();
}
inline void C_DB_LOGIN::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_DB_LOGIN::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_DB_LOGIN::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_DB_LOGIN.id)
  return id_.Release();
}
inline void C_DB_LOGIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_DB_LOGIN.id)
}

// string pw = 2;
inline void C_DB_LOGIN::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C_DB_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOGIN.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_DB_LOGIN::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOGIN.pw)
}
inline std::string* C_DB_LOGIN::mutable_pw() {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C_DB_LOGIN.pw)
  return _s;
}
inline const std::string& C_DB_LOGIN::_internal_pw() const {
  return pw_.Get();
}
inline void C_DB_LOGIN::_internal_set_pw(const std::string& value) {
  
  pw_.Set(value, GetArenaForAllocation());
}
inline std::string* C_DB_LOGIN::_internal_mutable_pw() {
  
  return pw_.Mutable(GetArenaForAllocation());
}
inline std::string* C_DB_LOGIN::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C_DB_LOGIN.pw)
  return pw_.Release();
}
inline void C_DB_LOGIN::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pw_.IsDefault()) {
    pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_DB_LOGIN.pw)
}

// uint64 requestid = 3;
inline void C_DB_LOGIN::clear_requestid() {
  requestid_ = uint64_t{0u};
}
inline uint64_t C_DB_LOGIN::_internal_requestid() const {
  return requestid_;
}
inline uint64_t C_DB_LOGIN::requestid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOGIN.requestid)
  return _internal_requestid();
}
inline void C_DB_LOGIN::_internal_set_requestid(uint64_t value) {
  
  requestid_ = value;
}
inline void C_DB_LOGIN::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOGIN.requestid)
}

// -------------------------------------------------------------------

// S_DB_LOGIN

// bool success = 1;
inline void S_DB_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_DB_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_DB_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOGIN.success)
  return _internal_success();
}
inline void S_DB_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_DB_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_LOGIN.success)
}

// repeated .Protocol.ObjectInfo objectinfos = 2;
inline int S_DB_LOGIN::_internal_objectinfos_size() const {
  return objectinfos_.size();
}
inline int S_DB_LOGIN::objectinfos_size() const {
  return _internal_objectinfos_size();
}
inline ::Protocol::ObjectInfo* S_DB_LOGIN::mutable_objectinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DB_LOGIN.objectinfos)
  return objectinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_DB_LOGIN::mutable_objectinfos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DB_LOGIN.objectinfos)
  return &objectinfos_;
}
inline const ::Protocol::ObjectInfo& S_DB_LOGIN::_internal_objectinfos(int index) const {
  return objectinfos_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_DB_LOGIN::objectinfos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOGIN.objectinfos)
  return _internal_objectinfos(index);
}
inline ::Protocol::ObjectInfo* S_DB_LOGIN::_internal_add_objectinfos() {
  return objectinfos_.Add();
}
inline ::Protocol::ObjectInfo* S_DB_LOGIN::add_objectinfos() {
  ::Protocol::ObjectInfo* _add = _internal_add_objectinfos();
  // @@protoc_insertion_point(field_add:Protocol.S_DB_LOGIN.objectinfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_DB_LOGIN::objectinfos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DB_LOGIN.objectinfos)
  return objectinfos_;
}

// .Protocol.LoginMessage errortype = 3;
inline void S_DB_LOGIN::clear_errortype() {
  errortype_ = 0;
}
inline ::Protocol::LoginMessage S_DB_LOGIN::_internal_errortype() const {
  return static_cast< ::Protocol::LoginMessage >(errortype_);
}
inline ::Protocol::LoginMessage S_DB_LOGIN::errortype() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOGIN.errortype)
  return _internal_errortype();
}
inline void S_DB_LOGIN::_internal_set_errortype(::Protocol::LoginMessage value) {
  
  errortype_ = value;
}
inline void S_DB_LOGIN::set_errortype(::Protocol::LoginMessage value) {
  _internal_set_errortype(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_LOGIN.errortype)
}

// uint64 requestid = 4;
inline void S_DB_LOGIN::clear_requestid() {
  requestid_ = uint64_t{0u};
}
inline uint64_t S_DB_LOGIN::_internal_requestid() const {
  return requestid_;
}
inline uint64_t S_DB_LOGIN::requestid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOGIN.requestid)
  return _internal_requestid();
}
inline void S_DB_LOGIN::_internal_set_requestid(uint64_t value) {
  
  requestid_ = value;
}
inline void S_DB_LOGIN::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_LOGIN.requestid)
}

// uint64 dbid = 5;
inline void S_DB_LOGIN::clear_dbid() {
  dbid_ = uint64_t{0u};
}
inline uint64_t S_DB_LOGIN::_internal_dbid() const {
  return dbid_;
}
inline uint64_t S_DB_LOGIN::dbid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOGIN.dbid)
  return _internal_dbid();
}
inline void S_DB_LOGIN::_internal_set_dbid(uint64_t value) {
  
  dbid_ = value;
}
inline void S_DB_LOGIN::set_dbid(uint64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_LOGIN.dbid)
}

// -------------------------------------------------------------------

// C_DB_GAINEXP

// uint64 characterid = 1;
inline void C_DB_GAINEXP::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_GAINEXP::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_GAINEXP::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_GAINEXP.characterid)
  return _internal_characterid();
}
inline void C_DB_GAINEXP::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_GAINEXP::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_GAINEXP.characterid)
}

// uint64 level = 2;
inline void C_DB_GAINEXP::clear_level() {
  level_ = uint64_t{0u};
}
inline uint64_t C_DB_GAINEXP::_internal_level() const {
  return level_;
}
inline uint64_t C_DB_GAINEXP::level() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_GAINEXP.level)
  return _internal_level();
}
inline void C_DB_GAINEXP::_internal_set_level(uint64_t value) {
  
  level_ = value;
}
inline void C_DB_GAINEXP::set_level(uint64_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_GAINEXP.level)
}

// uint64 nowexp = 3;
inline void C_DB_GAINEXP::clear_nowexp() {
  nowexp_ = uint64_t{0u};
}
inline uint64_t C_DB_GAINEXP::_internal_nowexp() const {
  return nowexp_;
}
inline uint64_t C_DB_GAINEXP::nowexp() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_GAINEXP.nowexp)
  return _internal_nowexp();
}
inline void C_DB_GAINEXP::_internal_set_nowexp(uint64_t value) {
  
  nowexp_ = value;
}
inline void C_DB_GAINEXP::set_nowexp(uint64_t value) {
  _internal_set_nowexp(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_GAINEXP.nowexp)
}

// -------------------------------------------------------------------

// S_DB_GAINEXP

// -------------------------------------------------------------------

// C_DB_GAINGOLD

// uint64 characterid = 1;
inline void C_DB_GAINGOLD::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_GAINGOLD::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_GAINGOLD::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_GAINGOLD.characterid)
  return _internal_characterid();
}
inline void C_DB_GAINGOLD::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_GAINGOLD::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_GAINGOLD.characterid)
}

// int32 gold = 2;
inline void C_DB_GAINGOLD::clear_gold() {
  gold_ = 0;
}
inline int32_t C_DB_GAINGOLD::_internal_gold() const {
  return gold_;
}
inline int32_t C_DB_GAINGOLD::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_GAINGOLD.gold)
  return _internal_gold();
}
inline void C_DB_GAINGOLD::_internal_set_gold(int32_t value) {
  
  gold_ = value;
}
inline void C_DB_GAINGOLD::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_GAINGOLD.gold)
}

// int32 logtype = 3;
inline void C_DB_GAINGOLD::clear_logtype() {
  logtype_ = 0;
}
inline int32_t C_DB_GAINGOLD::_internal_logtype() const {
  return logtype_;
}
inline int32_t C_DB_GAINGOLD::logtype() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_GAINGOLD.logtype)
  return _internal_logtype();
}
inline void C_DB_GAINGOLD::_internal_set_logtype(int32_t value) {
  
  logtype_ = value;
}
inline void C_DB_GAINGOLD::set_logtype(int32_t value) {
  _internal_set_logtype(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_GAINGOLD.logtype)
}

// -------------------------------------------------------------------

// S_DB_GAINGOLD

// -------------------------------------------------------------------

// C_DB_LOADEQUIPMENT

// uint64 characterid = 1;
inline void C_DB_LOADEQUIPMENT::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_LOADEQUIPMENT::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_LOADEQUIPMENT::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOADEQUIPMENT.characterid)
  return _internal_characterid();
}
inline void C_DB_LOADEQUIPMENT::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_LOADEQUIPMENT::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOADEQUIPMENT.characterid)
}

// uint64 requestid = 2;
inline void C_DB_LOADEQUIPMENT::clear_requestid() {
  requestid_ = uint64_t{0u};
}
inline uint64_t C_DB_LOADEQUIPMENT::_internal_requestid() const {
  return requestid_;
}
inline uint64_t C_DB_LOADEQUIPMENT::requestid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOADEQUIPMENT.requestid)
  return _internal_requestid();
}
inline void C_DB_LOADEQUIPMENT::_internal_set_requestid(uint64_t value) {
  
  requestid_ = value;
}
inline void C_DB_LOADEQUIPMENT::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOADEQUIPMENT.requestid)
}

// -------------------------------------------------------------------

// S_DB_LOADEQUIPMENT

// uint64 requestid = 1;
inline void S_DB_LOADEQUIPMENT::clear_requestid() {
  requestid_ = uint64_t{0u};
}
inline uint64_t S_DB_LOADEQUIPMENT::_internal_requestid() const {
  return requestid_;
}
inline uint64_t S_DB_LOADEQUIPMENT::requestid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOADEQUIPMENT.requestid)
  return _internal_requestid();
}
inline void S_DB_LOADEQUIPMENT::_internal_set_requestid(uint64_t value) {
  
  requestid_ = value;
}
inline void S_DB_LOADEQUIPMENT::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_LOADEQUIPMENT.requestid)
}

// repeated .Protocol.ItemData items = 2;
inline int S_DB_LOADEQUIPMENT::_internal_items_size() const {
  return items_.size();
}
inline int S_DB_LOADEQUIPMENT::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::ItemData* S_DB_LOADEQUIPMENT::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DB_LOADEQUIPMENT.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
S_DB_LOADEQUIPMENT::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DB_LOADEQUIPMENT.items)
  return &items_;
}
inline const ::Protocol::ItemData& S_DB_LOADEQUIPMENT::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::ItemData& S_DB_LOADEQUIPMENT::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOADEQUIPMENT.items)
  return _internal_items(index);
}
inline ::Protocol::ItemData* S_DB_LOADEQUIPMENT::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::ItemData* S_DB_LOADEQUIPMENT::add_items() {
  ::Protocol::ItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_DB_LOADEQUIPMENT.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
S_DB_LOADEQUIPMENT::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DB_LOADEQUIPMENT.items)
  return items_;
}

// -------------------------------------------------------------------

// C_DB_LOADINVENTORY

// uint64 characterid = 1;
inline void C_DB_LOADINVENTORY::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_LOADINVENTORY::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_LOADINVENTORY::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOADINVENTORY.characterid)
  return _internal_characterid();
}
inline void C_DB_LOADINVENTORY::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_LOADINVENTORY::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOADINVENTORY.characterid)
}

// uint64 requestid = 2;
inline void C_DB_LOADINVENTORY::clear_requestid() {
  requestid_ = uint64_t{0u};
}
inline uint64_t C_DB_LOADINVENTORY::_internal_requestid() const {
  return requestid_;
}
inline uint64_t C_DB_LOADINVENTORY::requestid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_LOADINVENTORY.requestid)
  return _internal_requestid();
}
inline void C_DB_LOADINVENTORY::_internal_set_requestid(uint64_t value) {
  
  requestid_ = value;
}
inline void C_DB_LOADINVENTORY::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_LOADINVENTORY.requestid)
}

// -------------------------------------------------------------------

// S_DB_LOADINVENTORY

// uint64 requestid = 1;
inline void S_DB_LOADINVENTORY::clear_requestid() {
  requestid_ = uint64_t{0u};
}
inline uint64_t S_DB_LOADINVENTORY::_internal_requestid() const {
  return requestid_;
}
inline uint64_t S_DB_LOADINVENTORY::requestid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOADINVENTORY.requestid)
  return _internal_requestid();
}
inline void S_DB_LOADINVENTORY::_internal_set_requestid(uint64_t value) {
  
  requestid_ = value;
}
inline void S_DB_LOADINVENTORY::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_LOADINVENTORY.requestid)
}

// repeated .Protocol.ItemData items = 2;
inline int S_DB_LOADINVENTORY::_internal_items_size() const {
  return items_.size();
}
inline int S_DB_LOADINVENTORY::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::ItemData* S_DB_LOADINVENTORY::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_DB_LOADINVENTORY.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
S_DB_LOADINVENTORY::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DB_LOADINVENTORY.items)
  return &items_;
}
inline const ::Protocol::ItemData& S_DB_LOADINVENTORY::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::ItemData& S_DB_LOADINVENTORY::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_LOADINVENTORY.items)
  return _internal_items(index);
}
inline ::Protocol::ItemData* S_DB_LOADINVENTORY::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::ItemData* S_DB_LOADINVENTORY::add_items() {
  ::Protocol::ItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_DB_LOADINVENTORY.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
S_DB_LOADINVENTORY::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DB_LOADINVENTORY.items)
  return items_;
}

// -------------------------------------------------------------------

// C_DB_DELETEINVENTORY

// uint64 instanceid = 1;
inline void C_DB_DELETEINVENTORY::clear_instanceid() {
  instanceid_ = uint64_t{0u};
}
inline uint64_t C_DB_DELETEINVENTORY::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t C_DB_DELETEINVENTORY::instanceid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_DELETEINVENTORY.instanceid)
  return _internal_instanceid();
}
inline void C_DB_DELETEINVENTORY::_internal_set_instanceid(uint64_t value) {
  
  instanceid_ = value;
}
inline void C_DB_DELETEINVENTORY::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_DELETEINVENTORY.instanceid)
}

// -------------------------------------------------------------------

// S_DB_DELETEINVENTORY

// -------------------------------------------------------------------

// C_DB_UPDATEINVENTORY

// uint64 characterid = 1;
inline void C_DB_UPDATEINVENTORY::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_UPDATEINVENTORY::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_UPDATEINVENTORY::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_UPDATEINVENTORY.characterid)
  return _internal_characterid();
}
inline void C_DB_UPDATEINVENTORY::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_UPDATEINVENTORY::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_UPDATEINVENTORY.characterid)
}

// repeated .Protocol.ItemData items = 2;
inline int C_DB_UPDATEINVENTORY::_internal_items_size() const {
  return items_.size();
}
inline int C_DB_UPDATEINVENTORY::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::ItemData* C_DB_UPDATEINVENTORY::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C_DB_UPDATEINVENTORY.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
C_DB_UPDATEINVENTORY::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C_DB_UPDATEINVENTORY.items)
  return &items_;
}
inline const ::Protocol::ItemData& C_DB_UPDATEINVENTORY::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::ItemData& C_DB_UPDATEINVENTORY::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_UPDATEINVENTORY.items)
  return _internal_items(index);
}
inline ::Protocol::ItemData* C_DB_UPDATEINVENTORY::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::ItemData* C_DB_UPDATEINVENTORY::add_items() {
  ::Protocol::ItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.C_DB_UPDATEINVENTORY.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
C_DB_UPDATEINVENTORY::items() const {
  // @@protoc_insertion_point(field_list:Protocol.C_DB_UPDATEINVENTORY.items)
  return items_;
}

// -------------------------------------------------------------------

// S_DB_UPDATEINVENTORY

// -------------------------------------------------------------------

// C_DB_INSERTINVENTORY

// uint64 characterid = 1;
inline void C_DB_INSERTINVENTORY::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_INSERTINVENTORY::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_INSERTINVENTORY::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_INSERTINVENTORY.characterid)
  return _internal_characterid();
}
inline void C_DB_INSERTINVENTORY::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_INSERTINVENTORY::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_INSERTINVENTORY.characterid)
}

// repeated .Protocol.ItemData items = 2;
inline int C_DB_INSERTINVENTORY::_internal_items_size() const {
  return items_.size();
}
inline int C_DB_INSERTINVENTORY::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::ItemData* C_DB_INSERTINVENTORY::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C_DB_INSERTINVENTORY.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >*
C_DB_INSERTINVENTORY::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C_DB_INSERTINVENTORY.items)
  return &items_;
}
inline const ::Protocol::ItemData& C_DB_INSERTINVENTORY::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::ItemData& C_DB_INSERTINVENTORY::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_INSERTINVENTORY.items)
  return _internal_items(index);
}
inline ::Protocol::ItemData* C_DB_INSERTINVENTORY::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::ItemData* C_DB_INSERTINVENTORY::add_items() {
  ::Protocol::ItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.C_DB_INSERTINVENTORY.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemData >&
C_DB_INSERTINVENTORY::items() const {
  // @@protoc_insertion_point(field_list:Protocol.C_DB_INSERTINVENTORY.items)
  return items_;
}

// -------------------------------------------------------------------

// S_DB_INSERTINVENTORY

// -------------------------------------------------------------------

// C_DB_EQUIPMENT

// uint64 characterid = 1;
inline void C_DB_EQUIPMENT::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_EQUIPMENT::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_EQUIPMENT::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_EQUIPMENT.characterid)
  return _internal_characterid();
}
inline void C_DB_EQUIPMENT::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_EQUIPMENT::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_EQUIPMENT.characterid)
}

// repeated .Protocol.Equipment items = 2;
inline int C_DB_EQUIPMENT::_internal_items_size() const {
  return items_.size();
}
inline int C_DB_EQUIPMENT::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::Equipment* C_DB_EQUIPMENT::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C_DB_EQUIPMENT.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Equipment >*
C_DB_EQUIPMENT::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C_DB_EQUIPMENT.items)
  return &items_;
}
inline const ::Protocol::Equipment& C_DB_EQUIPMENT::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::Equipment& C_DB_EQUIPMENT::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_EQUIPMENT.items)
  return _internal_items(index);
}
inline ::Protocol::Equipment* C_DB_EQUIPMENT::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::Equipment* C_DB_EQUIPMENT::add_items() {
  ::Protocol::Equipment* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.C_DB_EQUIPMENT.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Equipment >&
C_DB_EQUIPMENT::items() const {
  // @@protoc_insertion_point(field_list:Protocol.C_DB_EQUIPMENT.items)
  return items_;
}

// -------------------------------------------------------------------

// S_DB_EQUIPMENT

// -------------------------------------------------------------------

// C_DB_UPDATEPOS

// uint64 characterid = 1;
inline void C_DB_UPDATEPOS::clear_characterid() {
  characterid_ = uint64_t{0u};
}
inline uint64_t C_DB_UPDATEPOS::_internal_characterid() const {
  return characterid_;
}
inline uint64_t C_DB_UPDATEPOS::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_UPDATEPOS.characterid)
  return _internal_characterid();
}
inline void C_DB_UPDATEPOS::_internal_set_characterid(uint64_t value) {
  
  characterid_ = value;
}
inline void C_DB_UPDATEPOS::set_characterid(uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_UPDATEPOS.characterid)
}

// .Protocol.ObjectInfo objectinfo = 2;
inline bool C_DB_UPDATEPOS::_internal_has_objectinfo() const {
  return this != internal_default_instance() && objectinfo_ != nullptr;
}
inline bool C_DB_UPDATEPOS::has_objectinfo() const {
  return _internal_has_objectinfo();
}
inline const ::Protocol::ObjectInfo& C_DB_UPDATEPOS::_internal_objectinfo() const {
  const ::Protocol::ObjectInfo* p = objectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_DB_UPDATEPOS::objectinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_UPDATEPOS.objectinfo)
  return _internal_objectinfo();
}
inline void C_DB_UPDATEPOS::unsafe_arena_set_allocated_objectinfo(
    ::Protocol::ObjectInfo* objectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinfo_);
  }
  objectinfo_ = objectinfo;
  if (objectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_DB_UPDATEPOS.objectinfo)
}
inline ::Protocol::ObjectInfo* C_DB_UPDATEPOS::release_objectinfo() {
  
  ::Protocol::ObjectInfo* temp = objectinfo_;
  objectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_DB_UPDATEPOS::unsafe_arena_release_objectinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_DB_UPDATEPOS.objectinfo)
  
  ::Protocol::ObjectInfo* temp = objectinfo_;
  objectinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_DB_UPDATEPOS::_internal_mutable_objectinfo() {
  
  if (objectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    objectinfo_ = p;
  }
  return objectinfo_;
}
inline ::Protocol::ObjectInfo* C_DB_UPDATEPOS::mutable_objectinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_objectinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_DB_UPDATEPOS.objectinfo)
  return _msg;
}
inline void C_DB_UPDATEPOS::set_allocated_objectinfo(::Protocol::ObjectInfo* objectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinfo_);
  }
  if (objectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinfo));
    if (message_arena != submessage_arena) {
      objectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinfo, submessage_arena);
    }
    
  } else {
    
  }
  objectinfo_ = objectinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_DB_UPDATEPOS.objectinfo)
}

// -------------------------------------------------------------------

// S_DB_UPDATEPOS

// -------------------------------------------------------------------

// C_DB_PING

// uint64 timestamp = 1;
inline void C_DB_PING::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t C_DB_PING::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t C_DB_PING::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DB_PING.timestamp)
  return _internal_timestamp();
}
inline void C_DB_PING::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void C_DB_PING::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DB_PING.timestamp)
}

// -------------------------------------------------------------------

// S_DB_PING

// uint64 timestamp = 1;
inline void S_DB_PING::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t S_DB_PING::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t S_DB_PING::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DB_PING.timestamp)
  return _internal_timestamp();
}
inline void S_DB_PING::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void S_DB_PING::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DB_PING.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DBProtocol_2eproto
