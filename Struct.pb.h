// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class DespawnList;
struct DespawnListDefaultTypeInternal;
extern DespawnListDefaultTypeInternal _DespawnList_default_instance_;
class Equipment;
struct EquipmentDefaultTypeInternal;
extern EquipmentDefaultTypeInternal _Equipment_default_instance_;
class ItemData;
struct ItemDataDefaultTypeInternal;
extern ItemDataDefaultTypeInternal _ItemData_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class SkillHitResult;
struct SkillHitResultDefaultTypeInternal;
extern SkillHitResultDefaultTypeInternal _SkillHitResult_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::DespawnList* Arena::CreateMaybeMessage<::Protocol::DespawnList>(Arena*);
template<> ::Protocol::Equipment* Arena::CreateMaybeMessage<::Protocol::Equipment>(Arena*);
template<> ::Protocol::ItemData* Arena::CreateMaybeMessage<::Protocol::ItemData>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PosInfo* Arena::CreateMaybeMessage<::Protocol::PosInfo>(Arena*);
template<> ::Protocol::SkillHitResult* Arena::CreateMaybeMessage<::Protocol::SkillHitResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class PosInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  ~PosInfo() override;
  explicit PROTOBUF_CONSTEXPR PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PosInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PosInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kYawFieldNumber = 5,
    kMovestateFieldNumber = 6,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double yaw = 5;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // .Protocol.MoveState movestate = 6;
  void clear_movestate();
  ::Protocol::MoveState movestate() const;
  void set_movestate(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_movestate() const;
  void _internal_set_movestate(::Protocol::MoveState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  double x_;
  double y_;
  double z_;
  double yaw_;
  int movestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 12,
    kPosinfoFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kObjectTypeFieldNumber = 3,
    kLeveltypeFieldNumber = 4,
    kChanelFieldNumber = 5,
    kCreatureTypeFieldNumber = 6,
    kHpFieldNumber = 7,
    kSpeedFieldNumber = 9,
    kMpFieldNumber = 8,
    kShieldFieldNumber = 10,
    kMonsteridFieldNumber = 11,
    kCurexpFieldNumber = 13,
    kPlayerlevelFieldNumber = 14,
    kGoldFieldNumber = 15,
    kTotalexpFieldNumber = 16,
    kMaxhpFieldNumber = 17,
  };
  // string name = 12;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.PosInfo posinfo = 2;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::Protocol::PosInfo& posinfo() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_posinfo();
  ::Protocol::PosInfo* mutable_posinfo();
  void set_allocated_posinfo(::Protocol::PosInfo* posinfo);
  private:
  const ::Protocol::PosInfo& _internal_posinfo() const;
  ::Protocol::PosInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::Protocol::PosInfo* posinfo);
  ::Protocol::PosInfo* unsafe_arena_release_posinfo();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.ObjectType object_type = 3;
  void clear_object_type();
  ::Protocol::ObjectType object_type() const;
  void set_object_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_object_type() const;
  void _internal_set_object_type(::Protocol::ObjectType value);
  public:

  // .Protocol.LevelType leveltype = 4;
  void clear_leveltype();
  ::Protocol::LevelType leveltype() const;
  void set_leveltype(::Protocol::LevelType value);
  private:
  ::Protocol::LevelType _internal_leveltype() const;
  void _internal_set_leveltype(::Protocol::LevelType value);
  public:

  // uint64 chanel = 5;
  void clear_chanel();
  uint64_t chanel() const;
  void set_chanel(uint64_t value);
  private:
  uint64_t _internal_chanel() const;
  void _internal_set_chanel(uint64_t value);
  public:

  // .Protocol.CreatureType creature_type = 6;
  void clear_creature_type();
  ::Protocol::CreatureType creature_type() const;
  void set_creature_type(::Protocol::CreatureType value);
  private:
  ::Protocol::CreatureType _internal_creature_type() const;
  void _internal_set_creature_type(::Protocol::CreatureType value);
  public:

  // int32 hp = 7;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // double speed = 9;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // int32 mp = 8;
  void clear_mp();
  int32_t mp() const;
  void set_mp(int32_t value);
  private:
  int32_t _internal_mp() const;
  void _internal_set_mp(int32_t value);
  public:

  // int32 shield = 10;
  void clear_shield();
  int32_t shield() const;
  void set_shield(int32_t value);
  private:
  int32_t _internal_shield() const;
  void _internal_set_shield(int32_t value);
  public:

  // .Protocol.MonsterID monsterid = 11;
  void clear_monsterid();
  ::Protocol::MonsterID monsterid() const;
  void set_monsterid(::Protocol::MonsterID value);
  private:
  ::Protocol::MonsterID _internal_monsterid() const;
  void _internal_set_monsterid(::Protocol::MonsterID value);
  public:

  // int32 curexp = 13;
  void clear_curexp();
  int32_t curexp() const;
  void set_curexp(int32_t value);
  private:
  int32_t _internal_curexp() const;
  void _internal_set_curexp(int32_t value);
  public:

  // int32 playerlevel = 14;
  void clear_playerlevel();
  int32_t playerlevel() const;
  void set_playerlevel(int32_t value);
  private:
  int32_t _internal_playerlevel() const;
  void _internal_set_playerlevel(int32_t value);
  public:

  // int32 gold = 15;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // int32 totalexp = 16;
  void clear_totalexp();
  int32_t totalexp() const;
  void set_totalexp(int32_t value);
  private:
  int32_t _internal_totalexp() const;
  void _internal_set_totalexp(int32_t value);
  public:

  // int32 maxhp = 17;
  void clear_maxhp();
  int32_t maxhp() const;
  void set_maxhp(int32_t value);
  private:
  int32_t _internal_maxhp() const;
  void _internal_set_maxhp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Protocol::PosInfo* posinfo_;
  uint64_t object_id_;
  int object_type_;
  int leveltype_;
  uint64_t chanel_;
  int creature_type_;
  int32_t hp_;
  double speed_;
  int32_t mp_;
  int32_t shield_;
  int monsterid_;
  int32_t curexp_;
  int32_t playerlevel_;
  int32_t gold_;
  int32_t totalexp_;
  int32_t maxhp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemData) */ {
 public:
  inline ItemData() : ItemData(nullptr) {}
  ~ItemData() override;
  explicit PROTOBUF_CONSTEXPR ItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemData(const ItemData& from);
  ItemData(ItemData&& from) noexcept
    : ItemData() {
    *this = ::std::move(from);
  }

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemData& operator=(ItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemData* internal_default_instance() {
    return reinterpret_cast<const ItemData*>(
               &_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ItemData& a, ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ItemData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemData";
  }
  protected:
  explicit ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotNameFieldNumber = 8,
    kIdFieldNumber = 1,
    kCodeFieldNumber = 2,
    kQuantityFieldNumber = 3,
    kEnhancementLevelFieldNumber = 4,
    kDurabilityFieldNumber = 5,
    kSlotIndexFieldNumber = 6,
    kIsEquippedFieldNumber = 7,
  };
  // string slot_name = 8;
  void clear_slot_name();
  const std::string& slot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot_name();
  PROTOBUF_NODISCARD std::string* release_slot_name();
  void set_allocated_slot_name(std::string* slot_name);
  private:
  const std::string& _internal_slot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot_name(const std::string& value);
  std::string* _internal_mutable_slot_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 code = 2;
  void clear_code();
  uint64_t code() const;
  void set_code(uint64_t value);
  private:
  uint64_t _internal_code() const;
  void _internal_set_code(uint64_t value);
  public:

  // int32 quantity = 3;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // int32 enhancement_level = 4;
  void clear_enhancement_level();
  int32_t enhancement_level() const;
  void set_enhancement_level(int32_t value);
  private:
  int32_t _internal_enhancement_level() const;
  void _internal_set_enhancement_level(int32_t value);
  public:

  // int32 durability = 5;
  void clear_durability();
  int32_t durability() const;
  void set_durability(int32_t value);
  private:
  int32_t _internal_durability() const;
  void _internal_set_durability(int32_t value);
  public:

  // int32 slot_index = 6;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // bool is_equipped = 7;
  void clear_is_equipped();
  bool is_equipped() const;
  void set_is_equipped(bool value);
  private:
  bool _internal_is_equipped() const;
  void _internal_set_is_equipped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_name_;
  uint64_t id_;
  uint64_t code_;
  int32_t quantity_;
  int32_t enhancement_level_;
  int32_t durability_;
  int32_t slot_index_;
  bool is_equipped_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Equipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Equipment) */ {
 public:
  inline Equipment() : Equipment(nullptr) {}
  ~Equipment() override;
  explicit PROTOBUF_CONSTEXPR Equipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Equipment(const Equipment& from);
  Equipment(Equipment&& from) noexcept
    : Equipment() {
    *this = ::std::move(from);
  }

  inline Equipment& operator=(const Equipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Equipment& operator=(Equipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Equipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Equipment* internal_default_instance() {
    return reinterpret_cast<const Equipment*>(
               &_Equipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Equipment& a, Equipment& b) {
    a.Swap(&b);
  }
  inline void Swap(Equipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Equipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Equipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Equipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Equipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Equipment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Equipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Equipment";
  }
  protected:
  explicit Equipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotNameFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
    kCodeFieldNumber = 3,
  };
  // string slot_name = 2;
  void clear_slot_name();
  const std::string& slot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot_name();
  PROTOBUF_NODISCARD std::string* release_slot_name();
  void set_allocated_slot_name(std::string* slot_name);
  private:
  const std::string& _internal_slot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot_name(const std::string& value);
  std::string* _internal_mutable_slot_name();
  public:

  // uint64 character_id = 1;
  void clear_character_id();
  uint64_t character_id() const;
  void set_character_id(uint64_t value);
  private:
  uint64_t _internal_character_id() const;
  void _internal_set_character_id(uint64_t value);
  public:

  // int32 code = 3;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Equipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_name_;
  uint64_t character_id_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class DespawnList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.DespawnList) */ {
 public:
  inline DespawnList() : DespawnList(nullptr) {}
  ~DespawnList() override;
  explicit PROTOBUF_CONSTEXPR DespawnList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DespawnList(const DespawnList& from);
  DespawnList(DespawnList&& from) noexcept
    : DespawnList() {
    *this = ::std::move(from);
  }

  inline DespawnList& operator=(const DespawnList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DespawnList& operator=(DespawnList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DespawnList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DespawnList* internal_default_instance() {
    return reinterpret_cast<const DespawnList*>(
               &_DespawnList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DespawnList& a, DespawnList& b) {
    a.Swap(&b);
  }
  inline void Swap(DespawnList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DespawnList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DespawnList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DespawnList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DespawnList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DespawnList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DespawnList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.DespawnList";
  }
  protected:
  explicit DespawnList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemcodeFieldNumber = 3,
    kIdFieldNumber = 1,
    kDropownerFieldNumber = 2,
  };
  // repeated int32 itemcode = 3;
  int itemcode_size() const;
  private:
  int _internal_itemcode_size() const;
  public:
  void clear_itemcode();
  private:
  int32_t _internal_itemcode(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_itemcode() const;
  void _internal_add_itemcode(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_itemcode();
  public:
  int32_t itemcode(int index) const;
  void set_itemcode(int index, int32_t value);
  void add_itemcode(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      itemcode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_itemcode();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 dropowner = 2;
  void clear_dropowner();
  uint64_t dropowner() const;
  void set_dropowner(uint64_t value);
  private:
  uint64_t _internal_dropowner() const;
  void _internal_set_dropowner(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.DespawnList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > itemcode_;
  mutable std::atomic<int> _itemcode_cached_byte_size_;
  uint64_t id_;
  uint64_t dropowner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SkillHitResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SkillHitResult) */ {
 public:
  inline SkillHitResult() : SkillHitResult(nullptr) {}
  ~SkillHitResult() override;
  explicit PROTOBUF_CONSTEXPR SkillHitResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillHitResult(const SkillHitResult& from);
  SkillHitResult(SkillHitResult&& from) noexcept
    : SkillHitResult() {
    *this = ::std::move(from);
  }

  inline SkillHitResult& operator=(const SkillHitResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillHitResult& operator=(SkillHitResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillHitResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillHitResult* internal_default_instance() {
    return reinterpret_cast<const SkillHitResult*>(
               &_SkillHitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SkillHitResult& a, SkillHitResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillHitResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillHitResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillHitResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillHitResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillHitResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SkillHitResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillHitResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SkillHitResult";
  }
  protected:
  explicit SkillHitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kDamageFieldNumber = 2,
    kIsCriticalFieldNumber = 3,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // double damage = 2;
  void clear_damage();
  double damage() const;
  void set_damage(double value);
  private:
  double _internal_damage() const;
  void _internal_set_damage(double value);
  public:

  // bool is_critical = 3;
  void clear_is_critical();
  bool is_critical() const;
  void set_is_critical(bool value);
  private:
  bool _internal_is_critical() const;
  void _internal_set_is_critical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SkillHitResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  double damage_;
  bool is_critical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PosInfo

// uint64 object_id = 1;
inline void PosInfo::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t PosInfo::_internal_object_id() const {
  return object_id_;
}
inline uint64_t PosInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.object_id)
  return _internal_object_id();
}
inline void PosInfo::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void PosInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.object_id)
}

// double x = 2;
inline void PosInfo::clear_x() {
  x_ = 0;
}
inline double PosInfo::_internal_x() const {
  return x_;
}
inline double PosInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.x)
  return _internal_x();
}
inline void PosInfo::_internal_set_x(double value) {
  
  x_ = value;
}
inline void PosInfo::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.x)
}

// double y = 3;
inline void PosInfo::clear_y() {
  y_ = 0;
}
inline double PosInfo::_internal_y() const {
  return y_;
}
inline double PosInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.y)
  return _internal_y();
}
inline void PosInfo::_internal_set_y(double value) {
  
  y_ = value;
}
inline void PosInfo::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.y)
}

// double z = 4;
inline void PosInfo::clear_z() {
  z_ = 0;
}
inline double PosInfo::_internal_z() const {
  return z_;
}
inline double PosInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.z)
  return _internal_z();
}
inline void PosInfo::_internal_set_z(double value) {
  
  z_ = value;
}
inline void PosInfo::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.z)
}

// double yaw = 5;
inline void PosInfo::clear_yaw() {
  yaw_ = 0;
}
inline double PosInfo::_internal_yaw() const {
  return yaw_;
}
inline double PosInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.yaw)
  return _internal_yaw();
}
inline void PosInfo::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void PosInfo::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.yaw)
}

// .Protocol.MoveState movestate = 6;
inline void PosInfo::clear_movestate() {
  movestate_ = 0;
}
inline ::Protocol::MoveState PosInfo::_internal_movestate() const {
  return static_cast< ::Protocol::MoveState >(movestate_);
}
inline ::Protocol::MoveState PosInfo::movestate() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.movestate)
  return _internal_movestate();
}
inline void PosInfo::_internal_set_movestate(::Protocol::MoveState value) {
  
  movestate_ = value;
}
inline void PosInfo::set_movestate(::Protocol::MoveState value) {
  _internal_set_movestate(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.movestate)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_object_id() const {
  return object_id_;
}
inline uint64_t ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void ObjectInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// .Protocol.PosInfo posinfo = 2;
inline bool ObjectInfo::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool ObjectInfo::has_posinfo() const {
  return _internal_has_posinfo();
}
inline void ObjectInfo::clear_posinfo() {
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
}
inline const ::Protocol::PosInfo& ObjectInfo::_internal_posinfo() const {
  const ::Protocol::PosInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& ObjectInfo::posinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.posinfo)
  return _internal_posinfo();
}
inline void ObjectInfo::unsafe_arena_set_allocated_posinfo(
    ::Protocol::PosInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.posinfo)
}
inline ::Protocol::PosInfo* ObjectInfo::release_posinfo() {
  
  ::Protocol::PosInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.posinfo)
  
  ::Protocol::PosInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::Protocol::PosInfo* ObjectInfo::mutable_posinfo() {
  ::Protocol::PosInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.posinfo)
  return _msg;
}
inline void ObjectInfo::set_allocated_posinfo(::Protocol::PosInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete posinfo_;
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(posinfo);
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.posinfo)
}

// .Protocol.ObjectType object_type = 3;
inline void ObjectInfo::clear_object_type() {
  object_type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_object_type() const {
  return static_cast< ::Protocol::ObjectType >(object_type_);
}
inline ::Protocol::ObjectType ObjectInfo::object_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_type)
  return _internal_object_type();
}
inline void ObjectInfo::_internal_set_object_type(::Protocol::ObjectType value) {
  
  object_type_ = value;
}
inline void ObjectInfo::set_object_type(::Protocol::ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_type)
}

// .Protocol.LevelType leveltype = 4;
inline void ObjectInfo::clear_leveltype() {
  leveltype_ = 0;
}
inline ::Protocol::LevelType ObjectInfo::_internal_leveltype() const {
  return static_cast< ::Protocol::LevelType >(leveltype_);
}
inline ::Protocol::LevelType ObjectInfo::leveltype() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.leveltype)
  return _internal_leveltype();
}
inline void ObjectInfo::_internal_set_leveltype(::Protocol::LevelType value) {
  
  leveltype_ = value;
}
inline void ObjectInfo::set_leveltype(::Protocol::LevelType value) {
  _internal_set_leveltype(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.leveltype)
}

// uint64 chanel = 5;
inline void ObjectInfo::clear_chanel() {
  chanel_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_chanel() const {
  return chanel_;
}
inline uint64_t ObjectInfo::chanel() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.chanel)
  return _internal_chanel();
}
inline void ObjectInfo::_internal_set_chanel(uint64_t value) {
  
  chanel_ = value;
}
inline void ObjectInfo::set_chanel(uint64_t value) {
  _internal_set_chanel(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.chanel)
}

// .Protocol.CreatureType creature_type = 6;
inline void ObjectInfo::clear_creature_type() {
  creature_type_ = 0;
}
inline ::Protocol::CreatureType ObjectInfo::_internal_creature_type() const {
  return static_cast< ::Protocol::CreatureType >(creature_type_);
}
inline ::Protocol::CreatureType ObjectInfo::creature_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.creature_type)
  return _internal_creature_type();
}
inline void ObjectInfo::_internal_set_creature_type(::Protocol::CreatureType value) {
  
  creature_type_ = value;
}
inline void ObjectInfo::set_creature_type(::Protocol::CreatureType value) {
  _internal_set_creature_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.creature_type)
}

// int32 hp = 7;
inline void ObjectInfo::clear_hp() {
  hp_ = 0;
}
inline int32_t ObjectInfo::_internal_hp() const {
  return hp_;
}
inline int32_t ObjectInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.hp)
  return _internal_hp();
}
inline void ObjectInfo::_internal_set_hp(int32_t value) {
  
  hp_ = value;
}
inline void ObjectInfo::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.hp)
}

// int32 mp = 8;
inline void ObjectInfo::clear_mp() {
  mp_ = 0;
}
inline int32_t ObjectInfo::_internal_mp() const {
  return mp_;
}
inline int32_t ObjectInfo::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.mp)
  return _internal_mp();
}
inline void ObjectInfo::_internal_set_mp(int32_t value) {
  
  mp_ = value;
}
inline void ObjectInfo::set_mp(int32_t value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.mp)
}

// double speed = 9;
inline void ObjectInfo::clear_speed() {
  speed_ = 0;
}
inline double ObjectInfo::_internal_speed() const {
  return speed_;
}
inline double ObjectInfo::speed() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.speed)
  return _internal_speed();
}
inline void ObjectInfo::_internal_set_speed(double value) {
  
  speed_ = value;
}
inline void ObjectInfo::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.speed)
}

// int32 shield = 10;
inline void ObjectInfo::clear_shield() {
  shield_ = 0;
}
inline int32_t ObjectInfo::_internal_shield() const {
  return shield_;
}
inline int32_t ObjectInfo::shield() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.shield)
  return _internal_shield();
}
inline void ObjectInfo::_internal_set_shield(int32_t value) {
  
  shield_ = value;
}
inline void ObjectInfo::set_shield(int32_t value) {
  _internal_set_shield(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.shield)
}

// .Protocol.MonsterID monsterid = 11;
inline void ObjectInfo::clear_monsterid() {
  monsterid_ = 0;
}
inline ::Protocol::MonsterID ObjectInfo::_internal_monsterid() const {
  return static_cast< ::Protocol::MonsterID >(monsterid_);
}
inline ::Protocol::MonsterID ObjectInfo::monsterid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.monsterid)
  return _internal_monsterid();
}
inline void ObjectInfo::_internal_set_monsterid(::Protocol::MonsterID value) {
  
  monsterid_ = value;
}
inline void ObjectInfo::set_monsterid(::Protocol::MonsterID value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.monsterid)
}

// string name = 12;
inline void ObjectInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.name)
}
inline std::string* ObjectInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.name)
  return _s;
}
inline const std::string& ObjectInfo::_internal_name() const {
  return name_.Get();
}
inline void ObjectInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.name)
  return name_.Release();
}
inline void ObjectInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.name)
}

// int32 curexp = 13;
inline void ObjectInfo::clear_curexp() {
  curexp_ = 0;
}
inline int32_t ObjectInfo::_internal_curexp() const {
  return curexp_;
}
inline int32_t ObjectInfo::curexp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.curexp)
  return _internal_curexp();
}
inline void ObjectInfo::_internal_set_curexp(int32_t value) {
  
  curexp_ = value;
}
inline void ObjectInfo::set_curexp(int32_t value) {
  _internal_set_curexp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.curexp)
}

// int32 playerlevel = 14;
inline void ObjectInfo::clear_playerlevel() {
  playerlevel_ = 0;
}
inline int32_t ObjectInfo::_internal_playerlevel() const {
  return playerlevel_;
}
inline int32_t ObjectInfo::playerlevel() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.playerlevel)
  return _internal_playerlevel();
}
inline void ObjectInfo::_internal_set_playerlevel(int32_t value) {
  
  playerlevel_ = value;
}
inline void ObjectInfo::set_playerlevel(int32_t value) {
  _internal_set_playerlevel(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.playerlevel)
}

// int32 gold = 15;
inline void ObjectInfo::clear_gold() {
  gold_ = 0;
}
inline int32_t ObjectInfo::_internal_gold() const {
  return gold_;
}
inline int32_t ObjectInfo::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.gold)
  return _internal_gold();
}
inline void ObjectInfo::_internal_set_gold(int32_t value) {
  
  gold_ = value;
}
inline void ObjectInfo::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.gold)
}

// int32 totalexp = 16;
inline void ObjectInfo::clear_totalexp() {
  totalexp_ = 0;
}
inline int32_t ObjectInfo::_internal_totalexp() const {
  return totalexp_;
}
inline int32_t ObjectInfo::totalexp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.totalexp)
  return _internal_totalexp();
}
inline void ObjectInfo::_internal_set_totalexp(int32_t value) {
  
  totalexp_ = value;
}
inline void ObjectInfo::set_totalexp(int32_t value) {
  _internal_set_totalexp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.totalexp)
}

// int32 maxhp = 17;
inline void ObjectInfo::clear_maxhp() {
  maxhp_ = 0;
}
inline int32_t ObjectInfo::_internal_maxhp() const {
  return maxhp_;
}
inline int32_t ObjectInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.maxhp)
  return _internal_maxhp();
}
inline void ObjectInfo::_internal_set_maxhp(int32_t value) {
  
  maxhp_ = value;
}
inline void ObjectInfo::set_maxhp(int32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.maxhp)
}

// -------------------------------------------------------------------

// ItemData

// uint64 id = 1;
inline void ItemData::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t ItemData::_internal_id() const {
  return id_;
}
inline uint64_t ItemData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.id)
  return _internal_id();
}
inline void ItemData::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void ItemData::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.id)
}

// uint64 code = 2;
inline void ItemData::clear_code() {
  code_ = uint64_t{0u};
}
inline uint64_t ItemData::_internal_code() const {
  return code_;
}
inline uint64_t ItemData::code() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.code)
  return _internal_code();
}
inline void ItemData::_internal_set_code(uint64_t value) {
  
  code_ = value;
}
inline void ItemData::set_code(uint64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.code)
}

// int32 quantity = 3;
inline void ItemData::clear_quantity() {
  quantity_ = 0;
}
inline int32_t ItemData::_internal_quantity() const {
  return quantity_;
}
inline int32_t ItemData::quantity() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.quantity)
  return _internal_quantity();
}
inline void ItemData::_internal_set_quantity(int32_t value) {
  
  quantity_ = value;
}
inline void ItemData::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.quantity)
}

// int32 enhancement_level = 4;
inline void ItemData::clear_enhancement_level() {
  enhancement_level_ = 0;
}
inline int32_t ItemData::_internal_enhancement_level() const {
  return enhancement_level_;
}
inline int32_t ItemData::enhancement_level() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.enhancement_level)
  return _internal_enhancement_level();
}
inline void ItemData::_internal_set_enhancement_level(int32_t value) {
  
  enhancement_level_ = value;
}
inline void ItemData::set_enhancement_level(int32_t value) {
  _internal_set_enhancement_level(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.enhancement_level)
}

// int32 durability = 5;
inline void ItemData::clear_durability() {
  durability_ = 0;
}
inline int32_t ItemData::_internal_durability() const {
  return durability_;
}
inline int32_t ItemData::durability() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.durability)
  return _internal_durability();
}
inline void ItemData::_internal_set_durability(int32_t value) {
  
  durability_ = value;
}
inline void ItemData::set_durability(int32_t value) {
  _internal_set_durability(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.durability)
}

// int32 slot_index = 6;
inline void ItemData::clear_slot_index() {
  slot_index_ = 0;
}
inline int32_t ItemData::_internal_slot_index() const {
  return slot_index_;
}
inline int32_t ItemData::slot_index() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.slot_index)
  return _internal_slot_index();
}
inline void ItemData::_internal_set_slot_index(int32_t value) {
  
  slot_index_ = value;
}
inline void ItemData::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.slot_index)
}

// bool is_equipped = 7;
inline void ItemData::clear_is_equipped() {
  is_equipped_ = false;
}
inline bool ItemData::_internal_is_equipped() const {
  return is_equipped_;
}
inline bool ItemData::is_equipped() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.is_equipped)
  return _internal_is_equipped();
}
inline void ItemData::_internal_set_is_equipped(bool value) {
  
  is_equipped_ = value;
}
inline void ItemData::set_is_equipped(bool value) {
  _internal_set_is_equipped(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemData.is_equipped)
}

// string slot_name = 8;
inline void ItemData::clear_slot_name() {
  slot_name_.ClearToEmpty();
}
inline const std::string& ItemData::slot_name() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemData.slot_name)
  return _internal_slot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ItemData::set_slot_name(ArgT0&& arg0, ArgT... args) {
 
 slot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ItemData.slot_name)
}
inline std::string* ItemData::mutable_slot_name() {
  std::string* _s = _internal_mutable_slot_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ItemData.slot_name)
  return _s;
}
inline const std::string& ItemData::_internal_slot_name() const {
  return slot_name_.Get();
}
inline void ItemData::_internal_set_slot_name(const std::string& value) {
  
  slot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ItemData::_internal_mutable_slot_name() {
  
  return slot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ItemData::release_slot_name() {
  // @@protoc_insertion_point(field_release:Protocol.ItemData.slot_name)
  return slot_name_.Release();
}
inline void ItemData::set_allocated_slot_name(std::string* slot_name) {
  if (slot_name != nullptr) {
    
  } else {
    
  }
  slot_name_.SetAllocated(slot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slot_name_.IsDefault()) {
    slot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ItemData.slot_name)
}

// -------------------------------------------------------------------

// Equipment

// uint64 character_id = 1;
inline void Equipment::clear_character_id() {
  character_id_ = uint64_t{0u};
}
inline uint64_t Equipment::_internal_character_id() const {
  return character_id_;
}
inline uint64_t Equipment::character_id() const {
  // @@protoc_insertion_point(field_get:Protocol.Equipment.character_id)
  return _internal_character_id();
}
inline void Equipment::_internal_set_character_id(uint64_t value) {
  
  character_id_ = value;
}
inline void Equipment::set_character_id(uint64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Equipment.character_id)
}

// string slot_name = 2;
inline void Equipment::clear_slot_name() {
  slot_name_.ClearToEmpty();
}
inline const std::string& Equipment::slot_name() const {
  // @@protoc_insertion_point(field_get:Protocol.Equipment.slot_name)
  return _internal_slot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Equipment::set_slot_name(ArgT0&& arg0, ArgT... args) {
 
 slot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Equipment.slot_name)
}
inline std::string* Equipment::mutable_slot_name() {
  std::string* _s = _internal_mutable_slot_name();
  // @@protoc_insertion_point(field_mutable:Protocol.Equipment.slot_name)
  return _s;
}
inline const std::string& Equipment::_internal_slot_name() const {
  return slot_name_.Get();
}
inline void Equipment::_internal_set_slot_name(const std::string& value) {
  
  slot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Equipment::_internal_mutable_slot_name() {
  
  return slot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Equipment::release_slot_name() {
  // @@protoc_insertion_point(field_release:Protocol.Equipment.slot_name)
  return slot_name_.Release();
}
inline void Equipment::set_allocated_slot_name(std::string* slot_name) {
  if (slot_name != nullptr) {
    
  } else {
    
  }
  slot_name_.SetAllocated(slot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slot_name_.IsDefault()) {
    slot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Equipment.slot_name)
}

// int32 code = 3;
inline void Equipment::clear_code() {
  code_ = 0;
}
inline int32_t Equipment::_internal_code() const {
  return code_;
}
inline int32_t Equipment::code() const {
  // @@protoc_insertion_point(field_get:Protocol.Equipment.code)
  return _internal_code();
}
inline void Equipment::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void Equipment::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Protocol.Equipment.code)
}

// -------------------------------------------------------------------

// DespawnList

// uint64 id = 1;
inline void DespawnList::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t DespawnList::_internal_id() const {
  return id_;
}
inline uint64_t DespawnList::id() const {
  // @@protoc_insertion_point(field_get:Protocol.DespawnList.id)
  return _internal_id();
}
inline void DespawnList::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void DespawnList::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.DespawnList.id)
}

// uint64 dropowner = 2;
inline void DespawnList::clear_dropowner() {
  dropowner_ = uint64_t{0u};
}
inline uint64_t DespawnList::_internal_dropowner() const {
  return dropowner_;
}
inline uint64_t DespawnList::dropowner() const {
  // @@protoc_insertion_point(field_get:Protocol.DespawnList.dropowner)
  return _internal_dropowner();
}
inline void DespawnList::_internal_set_dropowner(uint64_t value) {
  
  dropowner_ = value;
}
inline void DespawnList::set_dropowner(uint64_t value) {
  _internal_set_dropowner(value);
  // @@protoc_insertion_point(field_set:Protocol.DespawnList.dropowner)
}

// repeated int32 itemcode = 3;
inline int DespawnList::_internal_itemcode_size() const {
  return itemcode_.size();
}
inline int DespawnList::itemcode_size() const {
  return _internal_itemcode_size();
}
inline void DespawnList::clear_itemcode() {
  itemcode_.Clear();
}
inline int32_t DespawnList::_internal_itemcode(int index) const {
  return itemcode_.Get(index);
}
inline int32_t DespawnList::itemcode(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.DespawnList.itemcode)
  return _internal_itemcode(index);
}
inline void DespawnList::set_itemcode(int index, int32_t value) {
  itemcode_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.DespawnList.itemcode)
}
inline void DespawnList::_internal_add_itemcode(int32_t value) {
  itemcode_.Add(value);
}
inline void DespawnList::add_itemcode(int32_t value) {
  _internal_add_itemcode(value);
  // @@protoc_insertion_point(field_add:Protocol.DespawnList.itemcode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DespawnList::_internal_itemcode() const {
  return itemcode_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DespawnList::itemcode() const {
  // @@protoc_insertion_point(field_list:Protocol.DespawnList.itemcode)
  return _internal_itemcode();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DespawnList::_internal_mutable_itemcode() {
  return &itemcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DespawnList::mutable_itemcode() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.DespawnList.itemcode)
  return _internal_mutable_itemcode();
}

// -------------------------------------------------------------------

// SkillHitResult

// uint64 object_id = 1;
inline void SkillHitResult::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t SkillHitResult::_internal_object_id() const {
  return object_id_;
}
inline uint64_t SkillHitResult::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillHitResult.object_id)
  return _internal_object_id();
}
inline void SkillHitResult::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void SkillHitResult::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillHitResult.object_id)
}

// double damage = 2;
inline void SkillHitResult::clear_damage() {
  damage_ = 0;
}
inline double SkillHitResult::_internal_damage() const {
  return damage_;
}
inline double SkillHitResult::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillHitResult.damage)
  return _internal_damage();
}
inline void SkillHitResult::_internal_set_damage(double value) {
  
  damage_ = value;
}
inline void SkillHitResult::set_damage(double value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillHitResult.damage)
}

// bool is_critical = 3;
inline void SkillHitResult::clear_is_critical() {
  is_critical_ = false;
}
inline bool SkillHitResult::_internal_is_critical() const {
  return is_critical_;
}
inline bool SkillHitResult::is_critical() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillHitResult.is_critical)
  return _internal_is_critical();
}
inline void SkillHitResult::_internal_set_is_critical(bool value) {
  
  is_critical_ = value;
}
inline void SkillHitResult::set_is_critical(bool value) {
  _internal_set_is_critical(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillHitResult.is_critical)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
