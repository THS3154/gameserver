// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR PosInfo::PosInfo(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , yaw_(0)
  , movestate_(0)
{}
struct PosInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PosInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PosInfoDefaultTypeInternal() {}
  union {
    PosInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PosInfoDefaultTypeInternal _PosInfo_default_instance_;
PROTOBUF_CONSTEXPR ObjectInfo::ObjectInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , posinfo_(nullptr)
  , object_id_(uint64_t{0u})
  , object_type_(0)

  , leveltype_(0)

  , chanel_(uint64_t{0u})
  , creature_type_(0)

  , hp_(0)
  , speed_(0)
  , mp_(0)
  , shield_(0)
  , monsterid_(0)

  , curexp_(0)
  , playerlevel_(0)
  , gold_(0)
  , totalexp_(0)
  , maxhp_(0){}
struct ObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR ItemData::ItemData(
    ::_pbi::ConstantInitialized)
  : slot_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(uint64_t{0u})
  , code_(uint64_t{0u})
  , quantity_(0)
  , enhancement_level_(0)
  , durability_(0)
  , slot_index_(0)
  , is_equipped_(false){}
struct ItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDataDefaultTypeInternal() {}
  union {
    ItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDataDefaultTypeInternal _ItemData_default_instance_;
PROTOBUF_CONSTEXPR Equipment::Equipment(
    ::_pbi::ConstantInitialized)
  : slot_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , character_id_(uint64_t{0u})
  , code_(0){}
struct EquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipmentDefaultTypeInternal() {}
  union {
    Equipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipmentDefaultTypeInternal _Equipment_default_instance_;
PROTOBUF_CONSTEXPR DespawnList::DespawnList(
    ::_pbi::ConstantInitialized)
  : itemcode_()
  , _itemcode_cached_byte_size_(0)
  , id_(uint64_t{0u})
  , dropowner_(uint64_t{0u}){}
struct DespawnListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DespawnListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DespawnListDefaultTypeInternal() {}
  union {
    DespawnList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DespawnListDefaultTypeInternal _DespawnList_default_instance_;
PROTOBUF_CONSTEXPR SkillHitResult::SkillHitResult(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , damage_(0)
  , is_critical_(false){}
struct SkillHitResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillHitResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillHitResultDefaultTypeInternal() {}
  union {
    SkillHitResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillHitResultDefaultTypeInternal _SkillHitResult_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, movestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, posinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, object_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, leveltype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, chanel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, creature_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, shield_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, curexp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, playerlevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, totalexp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, maxhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, code_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, quantity_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, enhancement_level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, durability_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, slot_index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, is_equipped_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemData, slot_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Equipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Equipment, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Equipment, slot_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Equipment, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::DespawnList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::DespawnList, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::DespawnList, dropowner_),
  PROTOBUF_FIELD_OFFSET(::Protocol::DespawnList, itemcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::SkillHitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::SkillHitResult, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::SkillHitResult, damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::SkillHitResult, is_critical_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::PosInfo)},
  { 12, -1, -1, sizeof(::Protocol::ObjectInfo)},
  { 35, -1, -1, sizeof(::Protocol::ItemData)},
  { 49, -1, -1, sizeof(::Protocol::Equipment)},
  { 58, -1, -1, sizeof(::Protocol::DespawnList)},
  { 67, -1, -1, sizeof(::Protocol::SkillHitResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_PosInfo_default_instance_._instance,
  &::Protocol::_ObjectInfo_default_instance_._instance,
  &::Protocol::_ItemData_default_instance_._instance,
  &::Protocol::_Equipment_default_instance_._instance,
  &::Protocol::_DespawnList_default_instance_._instance,
  &::Protocol::_SkillHitResult_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"r\n\007"
  "PosInfo\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\001\022\t\n"
  "\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\022\013\n\003yaw\030\005 \001(\001\022&\n\tmove"
  "state\030\006 \001(\0162\023.Protocol.MoveState\"\226\003\n\nObj"
  "ectInfo\022\021\n\tobject_id\030\001 \001(\004\022\"\n\007posinfo\030\002 "
  "\001(\0132\021.Protocol.PosInfo\022)\n\013object_type\030\003 "
  "\001(\0162\024.Protocol.ObjectType\022&\n\tleveltype\030\004"
  " \001(\0162\023.Protocol.LevelType\022\016\n\006chanel\030\005 \001("
  "\004\022-\n\rcreature_type\030\006 \001(\0162\026.Protocol.Crea"
  "tureType\022\n\n\002hp\030\007 \001(\005\022\n\n\002mp\030\010 \001(\005\022\r\n\005spee"
  "d\030\t \001(\001\022\016\n\006shield\030\n \001(\005\022&\n\tmonsterid\030\013 \001"
  "(\0162\023.Protocol.MonsterID\022\014\n\004name\030\014 \001(\t\022\016\n"
  "\006curexp\030\r \001(\005\022\023\n\013playerlevel\030\016 \001(\005\022\014\n\004go"
  "ld\030\017 \001(\005\022\020\n\010totalexp\030\020 \001(\005\022\r\n\005maxhp\030\021 \001("
  "\005\"\241\001\n\010ItemData\022\n\n\002id\030\001 \001(\004\022\014\n\004code\030\002 \001(\004"
  "\022\020\n\010quantity\030\003 \001(\005\022\031\n\021enhancement_level\030"
  "\004 \001(\005\022\022\n\ndurability\030\005 \001(\005\022\022\n\nslot_index\030"
  "\006 \001(\005\022\023\n\013is_equipped\030\007 \001(\010\022\021\n\tslot_name\030"
  "\010 \001(\t\"B\n\tEquipment\022\024\n\014character_id\030\001 \001(\004"
  "\022\021\n\tslot_name\030\002 \001(\t\022\014\n\004code\030\003 \001(\005\">\n\013Des"
  "pawnList\022\n\n\002id\030\001 \001(\004\022\021\n\tdropowner\030\002 \001(\004\022"
  "\020\n\010itemcode\030\003 \003(\005\"H\n\016SkillHitResult\022\021\n\to"
  "bject_id\030\001 \001(\004\022\016\n\006damage\030\002 \001(\001\022\023\n\013is_cri"
  "tical\030\003 \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 939, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class PosInfo::_Internal {
 public:
};

PosInfo::PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PosInfo)
}
PosInfo::PosInfo(const PosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&movestate_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(movestate_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PosInfo)
}

inline void PosInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movestate_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(movestate_));
}

PosInfo::~PosInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PosInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PosInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PosInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PosInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movestate_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(movestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MoveState movestate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_movestate(static_cast<::Protocol::MoveState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PosInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PosInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  // double yaw = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_yaw(), target);
  }

  // .Protocol.MoveState movestate = 6;
  if (this->_internal_movestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_movestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PosInfo)
  return target;
}

size_t PosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PosInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  // .Protocol.MoveState movestate = 6;
  if (this->_internal_movestate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_movestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PosInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PosInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PosInfo::GetClassData() const { return &_class_data_; }

void PosInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PosInfo *>(to)->MergeFrom(
      static_cast<const PosInfo &>(from));
}


void PosInfo::MergeFrom(const PosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_movestate() != 0) {
    _internal_set_movestate(from._internal_movestate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PosInfo::CopyFrom(const PosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosInfo::IsInitialized() const {
  return true;
}

void PosInfo::InternalSwap(PosInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosInfo, movestate_)
      + sizeof(PosInfo::movestate_)
      - PROTOBUF_FIELD_OFFSET(PosInfo, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& posinfo(const ObjectInfo* msg);
};

const ::Protocol::PosInfo&
ObjectInfo::_Internal::posinfo(const ObjectInfo* msg) {
  return *msg->posinfo_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::Protocol::PosInfo(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxhp_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(maxhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectInfo)
}

inline void ObjectInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxhp_) -
    reinterpret_cast<char*>(&posinfo_)) + sizeof(maxhp_));
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete posinfo_;
}

void ObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxhp_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(maxhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo posinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectType object_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object_type(static_cast<::Protocol::ObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LevelType leveltype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_leveltype(static_cast<::Protocol::LevelType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 chanel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          chanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.CreatureType creature_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_creature_type(static_cast<::Protocol::CreatureType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 shield = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          shield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MonsterID monsterid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_monsterid(static_cast<::Protocol::MonsterID>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ObjectInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 curexp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          curexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerlevel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          playerlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 totalexp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          totalexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxhp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.PosInfo posinfo = 2;
  if (this->_internal_has_posinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::posinfo(this),
        _Internal::posinfo(this).GetCachedSize(), target, stream);
  }

  // .Protocol.ObjectType object_type = 3;
  if (this->_internal_object_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_object_type(), target);
  }

  // .Protocol.LevelType leveltype = 4;
  if (this->_internal_leveltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_leveltype(), target);
  }

  // uint64 chanel = 5;
  if (this->_internal_chanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_chanel(), target);
  }

  // .Protocol.CreatureType creature_type = 6;
  if (this->_internal_creature_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_creature_type(), target);
  }

  // int32 hp = 7;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_hp(), target);
  }

  // int32 mp = 8;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mp(), target);
  }

  // double speed = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_speed(), target);
  }

  // int32 shield = 10;
  if (this->_internal_shield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_shield(), target);
  }

  // .Protocol.MonsterID monsterid = 11;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_monsterid(), target);
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ObjectInfo.name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_name(), target);
  }

  // int32 curexp = 13;
  if (this->_internal_curexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_curexp(), target);
  }

  // int32 playerlevel = 14;
  if (this->_internal_playerlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_playerlevel(), target);
  }

  // int32 gold = 15;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_gold(), target);
  }

  // int32 totalexp = 16;
  if (this->_internal_totalexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_totalexp(), target);
  }

  // int32 maxhp = 17;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_maxhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 12;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Protocol.PosInfo posinfo = 2;
  if (this->_internal_has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.ObjectType object_type = 3;
  if (this->_internal_object_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_object_type());
  }

  // .Protocol.LevelType leveltype = 4;
  if (this->_internal_leveltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_leveltype());
  }

  // uint64 chanel = 5;
  if (this->_internal_chanel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chanel());
  }

  // .Protocol.CreatureType creature_type = 6;
  if (this->_internal_creature_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_creature_type());
  }

  // int32 hp = 7;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // double speed = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // int32 mp = 8;
  if (this->_internal_mp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mp());
  }

  // int32 shield = 10;
  if (this->_internal_shield() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shield());
  }

  // .Protocol.MonsterID monsterid = 11;
  if (this->_internal_monsterid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_monsterid());
  }

  // int32 curexp = 13;
  if (this->_internal_curexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curexp());
  }

  // int32 playerlevel = 14;
  if (this->_internal_playerlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerlevel());
  }

  // int32 gold = 15;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  // int32 totalexp = 16;
  if (this->_internal_totalexp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_totalexp());
  }

  // int32 maxhp = 17;
  if (this->_internal_maxhp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxhp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }

void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectInfo *>(to)->MergeFrom(
      static_cast<const ObjectInfo &>(from));
}


void ObjectInfo::MergeFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_posinfo()) {
    _internal_mutable_posinfo()->::Protocol::PosInfo::MergeFrom(from._internal_posinfo());
  }
  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_object_type() != 0) {
    _internal_set_object_type(from._internal_object_type());
  }
  if (from._internal_leveltype() != 0) {
    _internal_set_leveltype(from._internal_leveltype());
  }
  if (from._internal_chanel() != 0) {
    _internal_set_chanel(from._internal_chanel());
  }
  if (from._internal_creature_type() != 0) {
    _internal_set_creature_type(from._internal_creature_type());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from._internal_mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from._internal_shield() != 0) {
    _internal_set_shield(from._internal_shield());
  }
  if (from._internal_monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_curexp() != 0) {
    _internal_set_curexp(from._internal_curexp());
  }
  if (from._internal_playerlevel() != 0) {
    _internal_set_playerlevel(from._internal_playerlevel());
  }
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from._internal_totalexp() != 0) {
    _internal_set_totalexp(from._internal_totalexp());
  }
  if (from._internal_maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, maxhp_)
      + sizeof(ObjectInfo::maxhp_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, posinfo_)>(
          reinterpret_cast<char*>(&posinfo_),
          reinterpret_cast<char*>(&other->posinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class ItemData::_Internal {
 public:
};

ItemData::ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemData)
}
ItemData::ItemData(const ItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slot_name().empty()) {
    slot_name_.Set(from._internal_slot_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_equipped_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_equipped_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemData)
}

inline void ItemData::SharedCtor() {
slot_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slot_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_equipped_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_equipped_));
}

ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:Protocol.ItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  slot_name_.Destroy();
}

void ItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_equipped_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_equipped_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 enhancement_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          enhancement_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 durability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          durability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_equipped = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          is_equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slot_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_slot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ItemData.slot_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_code(), target);
  }

  // int32 quantity = 3;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_quantity(), target);
  }

  // int32 enhancement_level = 4;
  if (this->_internal_enhancement_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_enhancement_level(), target);
  }

  // int32 durability = 5;
  if (this->_internal_durability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_durability(), target);
  }

  // int32 slot_index = 6;
  if (this->_internal_slot_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_slot_index(), target);
  }

  // bool is_equipped = 7;
  if (this->_internal_is_equipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_equipped(), target);
  }

  // string slot_name = 8;
  if (!this->_internal_slot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_name().data(), static_cast<int>(this->_internal_slot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ItemData.slot_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_slot_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemData)
  return target;
}

size_t ItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_name = 8;
  if (!this->_internal_slot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_name());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_code());
  }

  // int32 quantity = 3;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  // int32 enhancement_level = 4;
  if (this->_internal_enhancement_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enhancement_level());
  }

  // int32 durability = 5;
  if (this->_internal_durability() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_durability());
  }

  // int32 slot_index = 6;
  if (this->_internal_slot_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot_index());
  }

  // bool is_equipped = 7;
  if (this->_internal_is_equipped() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemData::GetClassData() const { return &_class_data_; }

void ItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemData *>(to)->MergeFrom(
      static_cast<const ItemData &>(from));
}


void ItemData::MergeFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slot_name().empty()) {
    _internal_set_slot_name(from._internal_slot_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_enhancement_level() != 0) {
    _internal_set_enhancement_level(from._internal_enhancement_level());
  }
  if (from._internal_durability() != 0) {
    _internal_set_durability(from._internal_durability());
  }
  if (from._internal_slot_index() != 0) {
    _internal_set_slot_index(from._internal_slot_index());
  }
  if (from._internal_is_equipped() != 0) {
    _internal_set_is_equipped(from._internal_is_equipped());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemData::CopyFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  return true;
}

void ItemData::InternalSwap(ItemData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &slot_name_, lhs_arena,
      &other->slot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemData, is_equipped_)
      + sizeof(ItemData::is_equipped_)
      - PROTOBUF_FIELD_OFFSET(ItemData, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class Equipment::_Internal {
 public:
};

Equipment::Equipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.Equipment)
}
Equipment::Equipment(const Equipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slot_name().empty()) {
    slot_name_.Set(from._internal_slot_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Equipment)
}

inline void Equipment::SharedCtor() {
slot_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slot_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(code_));
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:Protocol.Equipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Equipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  slot_name_.Destroy();
}

void Equipment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Equipment::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Equipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_name_.ClearToEmpty();
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Equipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slot_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.Equipment.slot_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Equipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Equipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_character_id(), target);
  }

  // string slot_name = 2;
  if (!this->_internal_slot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_name().data(), static_cast<int>(this->_internal_slot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.Equipment.slot_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slot_name(), target);
  }

  // int32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Equipment)
  return target;
}

size_t Equipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Equipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_name = 2;
  if (!this->_internal_slot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_name());
  }

  // uint64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_character_id());
  }

  // int32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Equipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Equipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Equipment::GetClassData() const { return &_class_data_; }

void Equipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Equipment *>(to)->MergeFrom(
      static_cast<const Equipment &>(from));
}


void Equipment::MergeFrom(const Equipment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Equipment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slot_name().empty()) {
    _internal_set_slot_name(from._internal_slot_name());
  }
  if (from._internal_character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Equipment::CopyFrom(const Equipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Equipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  return true;
}

void Equipment::InternalSwap(Equipment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &slot_name_, lhs_arena,
      &other->slot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equipment, code_)
      + sizeof(Equipment::code_)
      - PROTOBUF_FIELD_OFFSET(Equipment, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Equipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class DespawnList::_Internal {
 public:
};

DespawnList::DespawnList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  itemcode_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.DespawnList)
}
DespawnList::DespawnList(const DespawnList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemcode_(from.itemcode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropowner_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dropowner_));
  // @@protoc_insertion_point(copy_constructor:Protocol.DespawnList)
}

inline void DespawnList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dropowner_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dropowner_));
}

DespawnList::~DespawnList() {
  // @@protoc_insertion_point(destructor:Protocol.DespawnList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DespawnList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DespawnList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DespawnList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.DespawnList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemcode_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropowner_) -
      reinterpret_cast<char*>(&id_)) + sizeof(dropowner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DespawnList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dropowner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dropowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 itemcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_itemcode(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_itemcode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DespawnList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.DespawnList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 dropowner = 2;
  if (this->_internal_dropowner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dropowner(), target);
  }

  // repeated int32 itemcode = 3;
  {
    int byte_size = _itemcode_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_itemcode(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.DespawnList)
  return target;
}

size_t DespawnList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.DespawnList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 itemcode = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->itemcode_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _itemcode_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 dropowner = 2;
  if (this->_internal_dropowner() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dropowner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DespawnList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DespawnList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DespawnList::GetClassData() const { return &_class_data_; }

void DespawnList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DespawnList *>(to)->MergeFrom(
      static_cast<const DespawnList &>(from));
}


void DespawnList::MergeFrom(const DespawnList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.DespawnList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  itemcode_.MergeFrom(from.itemcode_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_dropowner() != 0) {
    _internal_set_dropowner(from._internal_dropowner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DespawnList::CopyFrom(const DespawnList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.DespawnList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DespawnList::IsInitialized() const {
  return true;
}

void DespawnList::InternalSwap(DespawnList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  itemcode_.InternalSwap(&other->itemcode_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DespawnList, dropowner_)
      + sizeof(DespawnList::dropowner_)
      - PROTOBUF_FIELD_OFFSET(DespawnList, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DespawnList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// ===================================================================

class SkillHitResult::_Internal {
 public:
};

SkillHitResult::SkillHitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.SkillHitResult)
}
SkillHitResult::SkillHitResult(const SkillHitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_critical_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(is_critical_));
  // @@protoc_insertion_point(copy_constructor:Protocol.SkillHitResult)
}

inline void SkillHitResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_critical_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(is_critical_));
}

SkillHitResult::~SkillHitResult() {
  // @@protoc_insertion_point(destructor:Protocol.SkillHitResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillHitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SkillHitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SkillHitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.SkillHitResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_critical_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(is_critical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillHitResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_critical = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillHitResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.SkillHitResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // double damage = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = this->_internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_damage(), target);
  }

  // bool is_critical = 3;
  if (this->_internal_is_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_critical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.SkillHitResult)
  return target;
}

size_t SkillHitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.SkillHitResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // double damage = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = this->_internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 8;
  }

  // bool is_critical = 3;
  if (this->_internal_is_critical() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillHitResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SkillHitResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillHitResult::GetClassData() const { return &_class_data_; }

void SkillHitResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SkillHitResult *>(to)->MergeFrom(
      static_cast<const SkillHitResult &>(from));
}


void SkillHitResult::MergeFrom(const SkillHitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.SkillHitResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = from._internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _internal_set_damage(from._internal_damage());
  }
  if (from._internal_is_critical() != 0) {
    _internal_set_is_critical(from._internal_is_critical());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillHitResult::CopyFrom(const SkillHitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.SkillHitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillHitResult::IsInitialized() const {
  return true;
}

void SkillHitResult::InternalSwap(SkillHitResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillHitResult, is_critical_)
      + sizeof(SkillHitResult::is_critical_)
      - PROTOBUF_FIELD_OFFSET(SkillHitResult, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillHitResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::PosInfo*
Arena::CreateMaybeMessage< ::Protocol::PosInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemData*
Arena::CreateMaybeMessage< ::Protocol::ItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Equipment*
Arena::CreateMaybeMessage< ::Protocol::Equipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Equipment >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::DespawnList*
Arena::CreateMaybeMessage< ::Protocol::DespawnList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::DespawnList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::SkillHitResult*
Arena::CreateMaybeMessage< ::Protocol::SkillHitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::SkillHitResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
