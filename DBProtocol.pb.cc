// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProtocol.proto

#include "DBProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_DB_LOGIN::C_DB_LOGIN(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pw_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , requestid_(uint64_t{0u}){}
struct C_DB_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_LOGINDefaultTypeInternal() {}
  union {
    C_DB_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_LOGINDefaultTypeInternal _C_DB_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_DB_LOGIN::S_DB_LOGIN(
    ::_pbi::ConstantInitialized)
  : objectinfos_()
  , success_(false)
  , errortype_(0)

  , requestid_(uint64_t{0u})
  , dbid_(uint64_t{0u}){}
struct S_DB_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_LOGINDefaultTypeInternal() {}
  union {
    S_DB_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_LOGINDefaultTypeInternal _S_DB_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_DB_GAINEXP::C_DB_GAINEXP(
    ::_pbi::ConstantInitialized)
  : characterid_(uint64_t{0u})
  , level_(uint64_t{0u})
  , nowexp_(uint64_t{0u}){}
struct C_DB_GAINEXPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_GAINEXPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_GAINEXPDefaultTypeInternal() {}
  union {
    C_DB_GAINEXP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_GAINEXPDefaultTypeInternal _C_DB_GAINEXP_default_instance_;
PROTOBUF_CONSTEXPR S_DB_GAINEXP::S_DB_GAINEXP(
    ::_pbi::ConstantInitialized){}
struct S_DB_GAINEXPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_GAINEXPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_GAINEXPDefaultTypeInternal() {}
  union {
    S_DB_GAINEXP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_GAINEXPDefaultTypeInternal _S_DB_GAINEXP_default_instance_;
PROTOBUF_CONSTEXPR C_DB_GAINGOLD::C_DB_GAINGOLD(
    ::_pbi::ConstantInitialized)
  : characterid_(uint64_t{0u})
  , gold_(0)
  , logtype_(0){}
struct C_DB_GAINGOLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_GAINGOLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_GAINGOLDDefaultTypeInternal() {}
  union {
    C_DB_GAINGOLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_GAINGOLDDefaultTypeInternal _C_DB_GAINGOLD_default_instance_;
PROTOBUF_CONSTEXPR S_DB_GAINGOLD::S_DB_GAINGOLD(
    ::_pbi::ConstantInitialized){}
struct S_DB_GAINGOLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_GAINGOLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_GAINGOLDDefaultTypeInternal() {}
  union {
    S_DB_GAINGOLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_GAINGOLDDefaultTypeInternal _S_DB_GAINGOLD_default_instance_;
PROTOBUF_CONSTEXPR C_DB_LOADEQUIPMENT::C_DB_LOADEQUIPMENT(
    ::_pbi::ConstantInitialized)
  : characterid_(uint64_t{0u})
  , requestid_(uint64_t{0u}){}
struct C_DB_LOADEQUIPMENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_LOADEQUIPMENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_LOADEQUIPMENTDefaultTypeInternal() {}
  union {
    C_DB_LOADEQUIPMENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_LOADEQUIPMENTDefaultTypeInternal _C_DB_LOADEQUIPMENT_default_instance_;
PROTOBUF_CONSTEXPR S_DB_LOADEQUIPMENT::S_DB_LOADEQUIPMENT(
    ::_pbi::ConstantInitialized)
  : items_()
  , requestid_(uint64_t{0u}){}
struct S_DB_LOADEQUIPMENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_LOADEQUIPMENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_LOADEQUIPMENTDefaultTypeInternal() {}
  union {
    S_DB_LOADEQUIPMENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_LOADEQUIPMENTDefaultTypeInternal _S_DB_LOADEQUIPMENT_default_instance_;
PROTOBUF_CONSTEXPR C_DB_LOADINVENTORY::C_DB_LOADINVENTORY(
    ::_pbi::ConstantInitialized)
  : characterid_(uint64_t{0u})
  , requestid_(uint64_t{0u}){}
struct C_DB_LOADINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_LOADINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_LOADINVENTORYDefaultTypeInternal() {}
  union {
    C_DB_LOADINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_LOADINVENTORYDefaultTypeInternal _C_DB_LOADINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR S_DB_LOADINVENTORY::S_DB_LOADINVENTORY(
    ::_pbi::ConstantInitialized)
  : items_()
  , requestid_(uint64_t{0u}){}
struct S_DB_LOADINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_LOADINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_LOADINVENTORYDefaultTypeInternal() {}
  union {
    S_DB_LOADINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_LOADINVENTORYDefaultTypeInternal _S_DB_LOADINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR C_DB_DELETEINVENTORY::C_DB_DELETEINVENTORY(
    ::_pbi::ConstantInitialized)
  : instanceid_(uint64_t{0u}){}
struct C_DB_DELETEINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_DELETEINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_DELETEINVENTORYDefaultTypeInternal() {}
  union {
    C_DB_DELETEINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_DELETEINVENTORYDefaultTypeInternal _C_DB_DELETEINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR S_DB_DELETEINVENTORY::S_DB_DELETEINVENTORY(
    ::_pbi::ConstantInitialized){}
struct S_DB_DELETEINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_DELETEINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_DELETEINVENTORYDefaultTypeInternal() {}
  union {
    S_DB_DELETEINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_DELETEINVENTORYDefaultTypeInternal _S_DB_DELETEINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR C_DB_UPDATEINVENTORY::C_DB_UPDATEINVENTORY(
    ::_pbi::ConstantInitialized)
  : items_()
  , characterid_(uint64_t{0u}){}
struct C_DB_UPDATEINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_UPDATEINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_UPDATEINVENTORYDefaultTypeInternal() {}
  union {
    C_DB_UPDATEINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_UPDATEINVENTORYDefaultTypeInternal _C_DB_UPDATEINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR S_DB_UPDATEINVENTORY::S_DB_UPDATEINVENTORY(
    ::_pbi::ConstantInitialized){}
struct S_DB_UPDATEINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_UPDATEINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_UPDATEINVENTORYDefaultTypeInternal() {}
  union {
    S_DB_UPDATEINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_UPDATEINVENTORYDefaultTypeInternal _S_DB_UPDATEINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR C_DB_INSERTINVENTORY::C_DB_INSERTINVENTORY(
    ::_pbi::ConstantInitialized)
  : items_()
  , characterid_(uint64_t{0u}){}
struct C_DB_INSERTINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_INSERTINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_INSERTINVENTORYDefaultTypeInternal() {}
  union {
    C_DB_INSERTINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_INSERTINVENTORYDefaultTypeInternal _C_DB_INSERTINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR S_DB_INSERTINVENTORY::S_DB_INSERTINVENTORY(
    ::_pbi::ConstantInitialized){}
struct S_DB_INSERTINVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_INSERTINVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_INSERTINVENTORYDefaultTypeInternal() {}
  union {
    S_DB_INSERTINVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_INSERTINVENTORYDefaultTypeInternal _S_DB_INSERTINVENTORY_default_instance_;
PROTOBUF_CONSTEXPR C_DB_EQUIPMENT::C_DB_EQUIPMENT(
    ::_pbi::ConstantInitialized)
  : items_()
  , characterid_(uint64_t{0u}){}
struct C_DB_EQUIPMENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_EQUIPMENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_EQUIPMENTDefaultTypeInternal() {}
  union {
    C_DB_EQUIPMENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_EQUIPMENTDefaultTypeInternal _C_DB_EQUIPMENT_default_instance_;
PROTOBUF_CONSTEXPR S_DB_EQUIPMENT::S_DB_EQUIPMENT(
    ::_pbi::ConstantInitialized){}
struct S_DB_EQUIPMENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_EQUIPMENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_EQUIPMENTDefaultTypeInternal() {}
  union {
    S_DB_EQUIPMENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_EQUIPMENTDefaultTypeInternal _S_DB_EQUIPMENT_default_instance_;
PROTOBUF_CONSTEXPR C_DB_UPDATEPOS::C_DB_UPDATEPOS(
    ::_pbi::ConstantInitialized)
  : objectinfo_(nullptr)
  , characterid_(uint64_t{0u}){}
struct C_DB_UPDATEPOSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_UPDATEPOSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_UPDATEPOSDefaultTypeInternal() {}
  union {
    C_DB_UPDATEPOS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_UPDATEPOSDefaultTypeInternal _C_DB_UPDATEPOS_default_instance_;
PROTOBUF_CONSTEXPR S_DB_UPDATEPOS::S_DB_UPDATEPOS(
    ::_pbi::ConstantInitialized){}
struct S_DB_UPDATEPOSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_UPDATEPOSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_UPDATEPOSDefaultTypeInternal() {}
  union {
    S_DB_UPDATEPOS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_UPDATEPOSDefaultTypeInternal _S_DB_UPDATEPOS_default_instance_;
PROTOBUF_CONSTEXPR C_DB_PING::C_DB_PING(
    ::_pbi::ConstantInitialized)
  : timestamp_(uint64_t{0u}){}
struct C_DB_PINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DB_PINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DB_PINGDefaultTypeInternal() {}
  union {
    C_DB_PING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DB_PINGDefaultTypeInternal _C_DB_PING_default_instance_;
PROTOBUF_CONSTEXPR S_DB_PING::S_DB_PING(
    ::_pbi::ConstantInitialized)
  : timestamp_(uint64_t{0u}){}
struct S_DB_PINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DB_PINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DB_PINGDefaultTypeInternal() {}
  union {
    S_DB_PING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DB_PINGDefaultTypeInternal _S_DB_PING_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_DBProtocol_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_DBProtocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_DBProtocol_2eproto = nullptr;

const uint32_t TableStruct_DBProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOGIN, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOGIN, pw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOGIN, requestid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOGIN, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOGIN, objectinfos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOGIN, errortype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOGIN, requestid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOGIN, dbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINEXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINEXP, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINEXP, level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINEXP, nowexp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_GAINEXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINGOLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINGOLD, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINGOLD, gold_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_GAINGOLD, logtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_GAINGOLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOADEQUIPMENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOADEQUIPMENT, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOADEQUIPMENT, requestid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOADEQUIPMENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOADEQUIPMENT, requestid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOADEQUIPMENT, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOADINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOADINVENTORY, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_LOADINVENTORY, requestid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOADINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOADINVENTORY, requestid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_LOADINVENTORY, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_DELETEINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_DELETEINVENTORY, instanceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_DELETEINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_UPDATEINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_UPDATEINVENTORY, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_UPDATEINVENTORY, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_UPDATEINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_INSERTINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_INSERTINVENTORY, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_INSERTINVENTORY, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_INSERTINVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_EQUIPMENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_EQUIPMENT, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_EQUIPMENT, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_EQUIPMENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_UPDATEPOS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_UPDATEPOS, characterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_UPDATEPOS, objectinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_UPDATEPOS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DB_PING, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DB_PING, timestamp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_DB_LOGIN)},
  { 9, -1, -1, sizeof(::Protocol::S_DB_LOGIN)},
  { 20, -1, -1, sizeof(::Protocol::C_DB_GAINEXP)},
  { 29, -1, -1, sizeof(::Protocol::S_DB_GAINEXP)},
  { 35, -1, -1, sizeof(::Protocol::C_DB_GAINGOLD)},
  { 44, -1, -1, sizeof(::Protocol::S_DB_GAINGOLD)},
  { 50, -1, -1, sizeof(::Protocol::C_DB_LOADEQUIPMENT)},
  { 58, -1, -1, sizeof(::Protocol::S_DB_LOADEQUIPMENT)},
  { 66, -1, -1, sizeof(::Protocol::C_DB_LOADINVENTORY)},
  { 74, -1, -1, sizeof(::Protocol::S_DB_LOADINVENTORY)},
  { 82, -1, -1, sizeof(::Protocol::C_DB_DELETEINVENTORY)},
  { 89, -1, -1, sizeof(::Protocol::S_DB_DELETEINVENTORY)},
  { 95, -1, -1, sizeof(::Protocol::C_DB_UPDATEINVENTORY)},
  { 103, -1, -1, sizeof(::Protocol::S_DB_UPDATEINVENTORY)},
  { 109, -1, -1, sizeof(::Protocol::C_DB_INSERTINVENTORY)},
  { 117, -1, -1, sizeof(::Protocol::S_DB_INSERTINVENTORY)},
  { 123, -1, -1, sizeof(::Protocol::C_DB_EQUIPMENT)},
  { 131, -1, -1, sizeof(::Protocol::S_DB_EQUIPMENT)},
  { 137, -1, -1, sizeof(::Protocol::C_DB_UPDATEPOS)},
  { 145, -1, -1, sizeof(::Protocol::S_DB_UPDATEPOS)},
  { 151, -1, -1, sizeof(::Protocol::C_DB_PING)},
  { 158, -1, -1, sizeof(::Protocol::S_DB_PING)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_DB_LOGIN_default_instance_._instance,
  &::Protocol::_S_DB_LOGIN_default_instance_._instance,
  &::Protocol::_C_DB_GAINEXP_default_instance_._instance,
  &::Protocol::_S_DB_GAINEXP_default_instance_._instance,
  &::Protocol::_C_DB_GAINGOLD_default_instance_._instance,
  &::Protocol::_S_DB_GAINGOLD_default_instance_._instance,
  &::Protocol::_C_DB_LOADEQUIPMENT_default_instance_._instance,
  &::Protocol::_S_DB_LOADEQUIPMENT_default_instance_._instance,
  &::Protocol::_C_DB_LOADINVENTORY_default_instance_._instance,
  &::Protocol::_S_DB_LOADINVENTORY_default_instance_._instance,
  &::Protocol::_C_DB_DELETEINVENTORY_default_instance_._instance,
  &::Protocol::_S_DB_DELETEINVENTORY_default_instance_._instance,
  &::Protocol::_C_DB_UPDATEINVENTORY_default_instance_._instance,
  &::Protocol::_S_DB_UPDATEINVENTORY_default_instance_._instance,
  &::Protocol::_C_DB_INSERTINVENTORY_default_instance_._instance,
  &::Protocol::_S_DB_INSERTINVENTORY_default_instance_._instance,
  &::Protocol::_C_DB_EQUIPMENT_default_instance_._instance,
  &::Protocol::_S_DB_EQUIPMENT_default_instance_._instance,
  &::Protocol::_C_DB_UPDATEPOS_default_instance_._instance,
  &::Protocol::_S_DB_UPDATEPOS_default_instance_._instance,
  &::Protocol::_C_DB_PING_default_instance_._instance,
  &::Protocol::_S_DB_PING_default_instance_._instance,
};

const char descriptor_table_protodef_DBProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020DBProtocol.proto\022\010Protocol\032\nEnum.proto"
  "\032\014Struct.proto\"7\n\nC_DB_LOGIN\022\n\n\002id\030\001 \001(\t"
  "\022\n\n\002pw\030\002 \001(\t\022\021\n\trequestid\030\003 \001(\004\"\224\001\n\nS_DB"
  "_LOGIN\022\017\n\007success\030\001 \001(\010\022)\n\013objectinfos\030\002"
  " \003(\0132\024.Protocol.ObjectInfo\022)\n\terrortype\030"
  "\003 \001(\0162\026.Protocol.LoginMessage\022\021\n\trequest"
  "id\030\004 \001(\004\022\014\n\004dbid\030\005 \001(\004\"B\n\014C_DB_GAINEXP\022\023"
  "\n\013characterid\030\001 \001(\004\022\r\n\005level\030\002 \001(\004\022\016\n\006no"
  "wexp\030\003 \001(\004\"\016\n\014S_DB_GAINEXP\"C\n\rC_DB_GAING"
  "OLD\022\023\n\013characterid\030\001 \001(\004\022\014\n\004gold\030\002 \001(\005\022\017"
  "\n\007logtype\030\003 \001(\005\"\017\n\rS_DB_GAINGOLD\"<\n\022C_DB"
  "_LOADEQUIPMENT\022\023\n\013characterid\030\001 \001(\004\022\021\n\tr"
  "equestid\030\002 \001(\004\"J\n\022S_DB_LOADEQUIPMENT\022\021\n\t"
  "requestid\030\001 \001(\004\022!\n\005items\030\002 \003(\0132\022.Protoco"
  "l.ItemData\"<\n\022C_DB_LOADINVENTORY\022\023\n\013char"
  "acterid\030\001 \001(\004\022\021\n\trequestid\030\002 \001(\004\"J\n\022S_DB"
  "_LOADINVENTORY\022\021\n\trequestid\030\001 \001(\004\022!\n\005ite"
  "ms\030\002 \003(\0132\022.Protocol.ItemData\"*\n\024C_DB_DEL"
  "ETEINVENTORY\022\022\n\ninstanceid\030\001 \001(\004\"\026\n\024S_DB"
  "_DELETEINVENTORY\"N\n\024C_DB_UPDATEINVENTORY"
  "\022\023\n\013characterid\030\001 \001(\004\022!\n\005items\030\002 \003(\0132\022.P"
  "rotocol.ItemData\"\026\n\024S_DB_UPDATEINVENTORY"
  "\"N\n\024C_DB_INSERTINVENTORY\022\023\n\013characterid\030"
  "\001 \001(\004\022!\n\005items\030\002 \003(\0132\022.Protocol.ItemData"
  "\"\026\n\024S_DB_INSERTINVENTORY\"I\n\016C_DB_EQUIPME"
  "NT\022\023\n\013characterid\030\001 \001(\004\022\"\n\005items\030\002 \003(\0132\023"
  ".Protocol.Equipment\"\020\n\016S_DB_EQUIPMENT\"O\n"
  "\016C_DB_UPDATEPOS\022\023\n\013characterid\030\001 \001(\004\022(\n\n"
  "objectinfo\030\002 \001(\0132\024.Protocol.ObjectInfo\"\020"
  "\n\016S_DB_UPDATEPOS\"\036\n\tC_DB_PING\022\021\n\ttimesta"
  "mp\030\001 \001(\004\"\036\n\tS_DB_PING\022\021\n\ttimestamp\030\001 \001(\004"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_DBProtocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_DBProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DBProtocol_2eproto = {
    false, false, 1248, descriptor_table_protodef_DBProtocol_2eproto,
    "DBProtocol.proto",
    &descriptor_table_DBProtocol_2eproto_once, descriptor_table_DBProtocol_2eproto_deps, 2, 22,
    schemas, file_default_instances, TableStruct_DBProtocol_2eproto::offsets,
    file_level_metadata_DBProtocol_2eproto, file_level_enum_descriptors_DBProtocol_2eproto,
    file_level_service_descriptors_DBProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DBProtocol_2eproto_getter() {
  return &descriptor_table_DBProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DBProtocol_2eproto(&descriptor_table_DBProtocol_2eproto);
namespace Protocol {

// ===================================================================

class C_DB_LOGIN::_Internal {
 public:
};

C_DB_LOGIN::C_DB_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_LOGIN)
}
C_DB_LOGIN::C_DB_LOGIN(const C_DB_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pw().empty()) {
    pw_.Set(from._internal_pw(), 
      GetArenaForAllocation());
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_LOGIN)
}

inline void C_DB_LOGIN::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pw_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pw_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
requestid_ = uint64_t{0u};
}

C_DB_LOGIN::~C_DB_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  pw_.Destroy();
}

void C_DB_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  requestid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_DB_LOGIN.id"));
        } else
          goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_DB_LOGIN.pw"));
        } else
          goto handle_unusual;
        continue;
      // uint64 requestid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_DB_LOGIN.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_DB_LOGIN.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  // uint64 requestid = 3;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_LOGIN)
  return target;
}

size_t C_DB_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  // uint64 requestid = 3;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_LOGIN::GetClassData() const { return &_class_data_; }

void C_DB_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_LOGIN *>(to)->MergeFrom(
      static_cast<const C_DB_LOGIN &>(from));
}


void C_DB_LOGIN::MergeFrom(const C_DB_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_LOGIN::CopyFrom(const C_DB_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_LOGIN::IsInitialized() const {
  return true;
}

void C_DB_LOGIN::InternalSwap(C_DB_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pw_, lhs_arena,
      &other->pw_, rhs_arena
  );
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[0]);
}

// ===================================================================

class S_DB_LOGIN::_Internal {
 public:
};

void S_DB_LOGIN::clear_objectinfos() {
  objectinfos_.Clear();
}
S_DB_LOGIN::S_DB_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objectinfos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_LOGIN)
}
S_DB_LOGIN::S_DB_LOGIN(const S_DB_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectinfos_(from.objectinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&dbid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(dbid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_LOGIN)
}

inline void S_DB_LOGIN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dbid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(dbid_));
}

S_DB_LOGIN::~S_DB_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_DB_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DB_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DB_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DB_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DB_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectinfos_.Clear();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dbid_) -
      reinterpret_cast<char*>(&success_)) + sizeof(dbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DB_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ObjectInfo objectinfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LoginMessage errortype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errortype(static_cast<::Protocol::LoginMessage>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 requestid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dbid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DB_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DB_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .Protocol.ObjectInfo objectinfos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objectinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_objectinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Protocol.LoginMessage errortype = 3;
  if (this->_internal_errortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_errortype(), target);
  }

  // uint64 requestid = 4;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_requestid(), target);
  }

  // uint64 dbid = 5;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_dbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DB_LOGIN)
  return target;
}

size_t S_DB_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DB_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo objectinfos = 2;
  total_size += 1UL * this->_internal_objectinfos_size();
  for (const auto& msg : this->objectinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.LoginMessage errortype = 3;
  if (this->_internal_errortype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errortype());
  }

  // uint64 requestid = 4;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
  }

  // uint64 dbid = 5;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DB_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_LOGIN::GetClassData() const { return &_class_data_; }

void S_DB_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DB_LOGIN *>(to)->MergeFrom(
      static_cast<const S_DB_LOGIN &>(from));
}


void S_DB_LOGIN::MergeFrom(const S_DB_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DB_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objectinfos_.MergeFrom(from.objectinfos_);
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_errortype() != 0) {
    _internal_set_errortype(from._internal_errortype());
  }
  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_dbid() != 0) {
    _internal_set_dbid(from._internal_dbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DB_LOGIN::CopyFrom(const S_DB_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DB_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DB_LOGIN::IsInitialized() const {
  return true;
}

void S_DB_LOGIN::InternalSwap(S_DB_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objectinfos_.InternalSwap(&other->objectinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DB_LOGIN, dbid_)
      + sizeof(S_DB_LOGIN::dbid_)
      - PROTOBUF_FIELD_OFFSET(S_DB_LOGIN, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DB_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[1]);
}

// ===================================================================

class C_DB_GAINEXP::_Internal {
 public:
};

C_DB_GAINEXP::C_DB_GAINEXP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_GAINEXP)
}
C_DB_GAINEXP::C_DB_GAINEXP(const C_DB_GAINEXP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&characterid_, &from.characterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nowexp_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(nowexp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_GAINEXP)
}

inline void C_DB_GAINEXP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&characterid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nowexp_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(nowexp_));
}

C_DB_GAINEXP::~C_DB_GAINEXP() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_GAINEXP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_GAINEXP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_GAINEXP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_GAINEXP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_GAINEXP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&characterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nowexp_) -
      reinterpret_cast<char*>(&characterid_)) + sizeof(nowexp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_GAINEXP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nowexp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nowexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_GAINEXP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_GAINEXP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // uint64 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_level(), target);
  }

  // uint64 nowexp = 3;
  if (this->_internal_nowexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nowexp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_GAINEXP)
  return target;
}

size_t C_DB_GAINEXP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_GAINEXP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  // uint64 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_level());
  }

  // uint64 nowexp = 3;
  if (this->_internal_nowexp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nowexp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_GAINEXP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_GAINEXP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_GAINEXP::GetClassData() const { return &_class_data_; }

void C_DB_GAINEXP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_GAINEXP *>(to)->MergeFrom(
      static_cast<const C_DB_GAINEXP &>(from));
}


void C_DB_GAINEXP::MergeFrom(const C_DB_GAINEXP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_GAINEXP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_nowexp() != 0) {
    _internal_set_nowexp(from._internal_nowexp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_GAINEXP::CopyFrom(const C_DB_GAINEXP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_GAINEXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_GAINEXP::IsInitialized() const {
  return true;
}

void C_DB_GAINEXP::InternalSwap(C_DB_GAINEXP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_DB_GAINEXP, nowexp_)
      + sizeof(C_DB_GAINEXP::nowexp_)
      - PROTOBUF_FIELD_OFFSET(C_DB_GAINEXP, characterid_)>(
          reinterpret_cast<char*>(&characterid_),
          reinterpret_cast<char*>(&other->characterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_GAINEXP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[2]);
}

// ===================================================================

class S_DB_GAINEXP::_Internal {
 public:
};

S_DB_GAINEXP::S_DB_GAINEXP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_GAINEXP)
}
S_DB_GAINEXP::S_DB_GAINEXP(const S_DB_GAINEXP& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_GAINEXP)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_GAINEXP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_GAINEXP::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_GAINEXP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[3]);
}

// ===================================================================

class C_DB_GAINGOLD::_Internal {
 public:
};

C_DB_GAINGOLD::C_DB_GAINGOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_GAINGOLD)
}
C_DB_GAINGOLD::C_DB_GAINGOLD(const C_DB_GAINGOLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&characterid_, &from.characterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logtype_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(logtype_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_GAINGOLD)
}

inline void C_DB_GAINGOLD::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&characterid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logtype_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(logtype_));
}

C_DB_GAINGOLD::~C_DB_GAINGOLD() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_GAINGOLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_GAINGOLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_GAINGOLD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_GAINGOLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_GAINGOLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&characterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logtype_) -
      reinterpret_cast<char*>(&characterid_)) + sizeof(logtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_GAINGOLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          logtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_GAINGOLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_GAINGOLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // int32 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  // int32 logtype = 3;
  if (this->_internal_logtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_logtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_GAINGOLD)
  return target;
}

size_t C_DB_GAINGOLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_GAINGOLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  // int32 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  // int32 logtype = 3;
  if (this->_internal_logtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_GAINGOLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_GAINGOLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_GAINGOLD::GetClassData() const { return &_class_data_; }

void C_DB_GAINGOLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_GAINGOLD *>(to)->MergeFrom(
      static_cast<const C_DB_GAINGOLD &>(from));
}


void C_DB_GAINGOLD::MergeFrom(const C_DB_GAINGOLD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_GAINGOLD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from._internal_logtype() != 0) {
    _internal_set_logtype(from._internal_logtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_GAINGOLD::CopyFrom(const C_DB_GAINGOLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_GAINGOLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_GAINGOLD::IsInitialized() const {
  return true;
}

void C_DB_GAINGOLD::InternalSwap(C_DB_GAINGOLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_DB_GAINGOLD, logtype_)
      + sizeof(C_DB_GAINGOLD::logtype_)
      - PROTOBUF_FIELD_OFFSET(C_DB_GAINGOLD, characterid_)>(
          reinterpret_cast<char*>(&characterid_),
          reinterpret_cast<char*>(&other->characterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_GAINGOLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[4]);
}

// ===================================================================

class S_DB_GAINGOLD::_Internal {
 public:
};

S_DB_GAINGOLD::S_DB_GAINGOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_GAINGOLD)
}
S_DB_GAINGOLD::S_DB_GAINGOLD(const S_DB_GAINGOLD& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_GAINGOLD)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_GAINGOLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_GAINGOLD::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_GAINGOLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[5]);
}

// ===================================================================

class C_DB_LOADEQUIPMENT::_Internal {
 public:
};

C_DB_LOADEQUIPMENT::C_DB_LOADEQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_LOADEQUIPMENT)
}
C_DB_LOADEQUIPMENT::C_DB_LOADEQUIPMENT(const C_DB_LOADEQUIPMENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&characterid_, &from.characterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_LOADEQUIPMENT)
}

inline void C_DB_LOADEQUIPMENT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&characterid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(requestid_));
}

C_DB_LOADEQUIPMENT::~C_DB_LOADEQUIPMENT() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_LOADEQUIPMENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_LOADEQUIPMENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_LOADEQUIPMENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_LOADEQUIPMENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_LOADEQUIPMENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&characterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&characterid_)) + sizeof(requestid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_LOADEQUIPMENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 requestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_LOADEQUIPMENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_LOADEQUIPMENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // uint64 requestid = 2;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_LOADEQUIPMENT)
  return target;
}

size_t C_DB_LOADEQUIPMENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_LOADEQUIPMENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  // uint64 requestid = 2;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_LOADEQUIPMENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_LOADEQUIPMENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_LOADEQUIPMENT::GetClassData() const { return &_class_data_; }

void C_DB_LOADEQUIPMENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_LOADEQUIPMENT *>(to)->MergeFrom(
      static_cast<const C_DB_LOADEQUIPMENT &>(from));
}


void C_DB_LOADEQUIPMENT::MergeFrom(const C_DB_LOADEQUIPMENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_LOADEQUIPMENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_LOADEQUIPMENT::CopyFrom(const C_DB_LOADEQUIPMENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_LOADEQUIPMENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_LOADEQUIPMENT::IsInitialized() const {
  return true;
}

void C_DB_LOADEQUIPMENT::InternalSwap(C_DB_LOADEQUIPMENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_DB_LOADEQUIPMENT, requestid_)
      + sizeof(C_DB_LOADEQUIPMENT::requestid_)
      - PROTOBUF_FIELD_OFFSET(C_DB_LOADEQUIPMENT, characterid_)>(
          reinterpret_cast<char*>(&characterid_),
          reinterpret_cast<char*>(&other->characterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_LOADEQUIPMENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[6]);
}

// ===================================================================

class S_DB_LOADEQUIPMENT::_Internal {
 public:
};

void S_DB_LOADEQUIPMENT::clear_items() {
  items_.Clear();
}
S_DB_LOADEQUIPMENT::S_DB_LOADEQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_LOADEQUIPMENT)
}
S_DB_LOADEQUIPMENT::S_DB_LOADEQUIPMENT(const S_DB_LOADEQUIPMENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_LOADEQUIPMENT)
}

inline void S_DB_LOADEQUIPMENT::SharedCtor() {
requestid_ = uint64_t{0u};
}

S_DB_LOADEQUIPMENT::~S_DB_LOADEQUIPMENT() {
  // @@protoc_insertion_point(destructor:Protocol.S_DB_LOADEQUIPMENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DB_LOADEQUIPMENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DB_LOADEQUIPMENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DB_LOADEQUIPMENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DB_LOADEQUIPMENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  requestid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DB_LOADEQUIPMENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemData items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DB_LOADEQUIPMENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DB_LOADEQUIPMENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 requestid = 1;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // repeated .Protocol.ItemData items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DB_LOADEQUIPMENT)
  return target;
}

size_t S_DB_LOADEQUIPMENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DB_LOADEQUIPMENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemData items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 requestid = 1;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_LOADEQUIPMENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DB_LOADEQUIPMENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_LOADEQUIPMENT::GetClassData() const { return &_class_data_; }

void S_DB_LOADEQUIPMENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DB_LOADEQUIPMENT *>(to)->MergeFrom(
      static_cast<const S_DB_LOADEQUIPMENT &>(from));
}


void S_DB_LOADEQUIPMENT::MergeFrom(const S_DB_LOADEQUIPMENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DB_LOADEQUIPMENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DB_LOADEQUIPMENT::CopyFrom(const S_DB_LOADEQUIPMENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DB_LOADEQUIPMENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DB_LOADEQUIPMENT::IsInitialized() const {
  return true;
}

void S_DB_LOADEQUIPMENT::InternalSwap(S_DB_LOADEQUIPMENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DB_LOADEQUIPMENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[7]);
}

// ===================================================================

class C_DB_LOADINVENTORY::_Internal {
 public:
};

C_DB_LOADINVENTORY::C_DB_LOADINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_LOADINVENTORY)
}
C_DB_LOADINVENTORY::C_DB_LOADINVENTORY(const C_DB_LOADINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&characterid_, &from.characterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_LOADINVENTORY)
}

inline void C_DB_LOADINVENTORY::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&characterid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&characterid_)) + sizeof(requestid_));
}

C_DB_LOADINVENTORY::~C_DB_LOADINVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_LOADINVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_LOADINVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_LOADINVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_LOADINVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_LOADINVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&characterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&characterid_)) + sizeof(requestid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_LOADINVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 requestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_LOADINVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_LOADINVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // uint64 requestid = 2;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_LOADINVENTORY)
  return target;
}

size_t C_DB_LOADINVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_LOADINVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  // uint64 requestid = 2;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_LOADINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_LOADINVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_LOADINVENTORY::GetClassData() const { return &_class_data_; }

void C_DB_LOADINVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_LOADINVENTORY *>(to)->MergeFrom(
      static_cast<const C_DB_LOADINVENTORY &>(from));
}


void C_DB_LOADINVENTORY::MergeFrom(const C_DB_LOADINVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_LOADINVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_LOADINVENTORY::CopyFrom(const C_DB_LOADINVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_LOADINVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_LOADINVENTORY::IsInitialized() const {
  return true;
}

void C_DB_LOADINVENTORY::InternalSwap(C_DB_LOADINVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_DB_LOADINVENTORY, requestid_)
      + sizeof(C_DB_LOADINVENTORY::requestid_)
      - PROTOBUF_FIELD_OFFSET(C_DB_LOADINVENTORY, characterid_)>(
          reinterpret_cast<char*>(&characterid_),
          reinterpret_cast<char*>(&other->characterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_LOADINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[8]);
}

// ===================================================================

class S_DB_LOADINVENTORY::_Internal {
 public:
};

void S_DB_LOADINVENTORY::clear_items() {
  items_.Clear();
}
S_DB_LOADINVENTORY::S_DB_LOADINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_LOADINVENTORY)
}
S_DB_LOADINVENTORY::S_DB_LOADINVENTORY(const S_DB_LOADINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_LOADINVENTORY)
}

inline void S_DB_LOADINVENTORY::SharedCtor() {
requestid_ = uint64_t{0u};
}

S_DB_LOADINVENTORY::~S_DB_LOADINVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.S_DB_LOADINVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DB_LOADINVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DB_LOADINVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DB_LOADINVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DB_LOADINVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  requestid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DB_LOADINVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemData items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DB_LOADINVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DB_LOADINVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 requestid = 1;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // repeated .Protocol.ItemData items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DB_LOADINVENTORY)
  return target;
}

size_t S_DB_LOADINVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DB_LOADINVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemData items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 requestid = 1;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_LOADINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DB_LOADINVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_LOADINVENTORY::GetClassData() const { return &_class_data_; }

void S_DB_LOADINVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DB_LOADINVENTORY *>(to)->MergeFrom(
      static_cast<const S_DB_LOADINVENTORY &>(from));
}


void S_DB_LOADINVENTORY::MergeFrom(const S_DB_LOADINVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DB_LOADINVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DB_LOADINVENTORY::CopyFrom(const S_DB_LOADINVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DB_LOADINVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DB_LOADINVENTORY::IsInitialized() const {
  return true;
}

void S_DB_LOADINVENTORY::InternalSwap(S_DB_LOADINVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DB_LOADINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[9]);
}

// ===================================================================

class C_DB_DELETEINVENTORY::_Internal {
 public:
};

C_DB_DELETEINVENTORY::C_DB_DELETEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_DELETEINVENTORY)
}
C_DB_DELETEINVENTORY::C_DB_DELETEINVENTORY(const C_DB_DELETEINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instanceid_ = from.instanceid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_DELETEINVENTORY)
}

inline void C_DB_DELETEINVENTORY::SharedCtor() {
instanceid_ = uint64_t{0u};
}

C_DB_DELETEINVENTORY::~C_DB_DELETEINVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_DELETEINVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_DELETEINVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_DELETEINVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_DELETEINVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_DELETEINVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instanceid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_DELETEINVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_DELETEINVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_DELETEINVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 instanceid = 1;
  if (this->_internal_instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_DELETEINVENTORY)
  return target;
}

size_t C_DB_DELETEINVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_DELETEINVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 instanceid = 1;
  if (this->_internal_instanceid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_instanceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_DELETEINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_DELETEINVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_DELETEINVENTORY::GetClassData() const { return &_class_data_; }

void C_DB_DELETEINVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_DELETEINVENTORY *>(to)->MergeFrom(
      static_cast<const C_DB_DELETEINVENTORY &>(from));
}


void C_DB_DELETEINVENTORY::MergeFrom(const C_DB_DELETEINVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_DELETEINVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_DELETEINVENTORY::CopyFrom(const C_DB_DELETEINVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_DELETEINVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_DELETEINVENTORY::IsInitialized() const {
  return true;
}

void C_DB_DELETEINVENTORY::InternalSwap(C_DB_DELETEINVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instanceid_, other->instanceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_DELETEINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[10]);
}

// ===================================================================

class S_DB_DELETEINVENTORY::_Internal {
 public:
};

S_DB_DELETEINVENTORY::S_DB_DELETEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_DELETEINVENTORY)
}
S_DB_DELETEINVENTORY::S_DB_DELETEINVENTORY(const S_DB_DELETEINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_DELETEINVENTORY)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_DELETEINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_DELETEINVENTORY::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_DELETEINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[11]);
}

// ===================================================================

class C_DB_UPDATEINVENTORY::_Internal {
 public:
};

void C_DB_UPDATEINVENTORY::clear_items() {
  items_.Clear();
}
C_DB_UPDATEINVENTORY::C_DB_UPDATEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_UPDATEINVENTORY)
}
C_DB_UPDATEINVENTORY::C_DB_UPDATEINVENTORY(const C_DB_UPDATEINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  characterid_ = from.characterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_UPDATEINVENTORY)
}

inline void C_DB_UPDATEINVENTORY::SharedCtor() {
characterid_ = uint64_t{0u};
}

C_DB_UPDATEINVENTORY::~C_DB_UPDATEINVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_UPDATEINVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_UPDATEINVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_UPDATEINVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_UPDATEINVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_UPDATEINVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  characterid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_UPDATEINVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemData items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_UPDATEINVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_UPDATEINVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // repeated .Protocol.ItemData items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_UPDATEINVENTORY)
  return target;
}

size_t C_DB_UPDATEINVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_UPDATEINVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemData items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_UPDATEINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_UPDATEINVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_UPDATEINVENTORY::GetClassData() const { return &_class_data_; }

void C_DB_UPDATEINVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_UPDATEINVENTORY *>(to)->MergeFrom(
      static_cast<const C_DB_UPDATEINVENTORY &>(from));
}


void C_DB_UPDATEINVENTORY::MergeFrom(const C_DB_UPDATEINVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_UPDATEINVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_UPDATEINVENTORY::CopyFrom(const C_DB_UPDATEINVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_UPDATEINVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_UPDATEINVENTORY::IsInitialized() const {
  return true;
}

void C_DB_UPDATEINVENTORY::InternalSwap(C_DB_UPDATEINVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(characterid_, other->characterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_UPDATEINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[12]);
}

// ===================================================================

class S_DB_UPDATEINVENTORY::_Internal {
 public:
};

S_DB_UPDATEINVENTORY::S_DB_UPDATEINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_UPDATEINVENTORY)
}
S_DB_UPDATEINVENTORY::S_DB_UPDATEINVENTORY(const S_DB_UPDATEINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_UPDATEINVENTORY)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_UPDATEINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_UPDATEINVENTORY::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_UPDATEINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[13]);
}

// ===================================================================

class C_DB_INSERTINVENTORY::_Internal {
 public:
};

void C_DB_INSERTINVENTORY::clear_items() {
  items_.Clear();
}
C_DB_INSERTINVENTORY::C_DB_INSERTINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_INSERTINVENTORY)
}
C_DB_INSERTINVENTORY::C_DB_INSERTINVENTORY(const C_DB_INSERTINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  characterid_ = from.characterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_INSERTINVENTORY)
}

inline void C_DB_INSERTINVENTORY::SharedCtor() {
characterid_ = uint64_t{0u};
}

C_DB_INSERTINVENTORY::~C_DB_INSERTINVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_INSERTINVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_INSERTINVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_INSERTINVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_INSERTINVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_INSERTINVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  characterid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_INSERTINVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemData items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_INSERTINVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_INSERTINVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // repeated .Protocol.ItemData items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_INSERTINVENTORY)
  return target;
}

size_t C_DB_INSERTINVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_INSERTINVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemData items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_INSERTINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_INSERTINVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_INSERTINVENTORY::GetClassData() const { return &_class_data_; }

void C_DB_INSERTINVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_INSERTINVENTORY *>(to)->MergeFrom(
      static_cast<const C_DB_INSERTINVENTORY &>(from));
}


void C_DB_INSERTINVENTORY::MergeFrom(const C_DB_INSERTINVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_INSERTINVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_INSERTINVENTORY::CopyFrom(const C_DB_INSERTINVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_INSERTINVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_INSERTINVENTORY::IsInitialized() const {
  return true;
}

void C_DB_INSERTINVENTORY::InternalSwap(C_DB_INSERTINVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(characterid_, other->characterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_INSERTINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[14]);
}

// ===================================================================

class S_DB_INSERTINVENTORY::_Internal {
 public:
};

S_DB_INSERTINVENTORY::S_DB_INSERTINVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_INSERTINVENTORY)
}
S_DB_INSERTINVENTORY::S_DB_INSERTINVENTORY(const S_DB_INSERTINVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_INSERTINVENTORY)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_INSERTINVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_INSERTINVENTORY::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_INSERTINVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[15]);
}

// ===================================================================

class C_DB_EQUIPMENT::_Internal {
 public:
};

void C_DB_EQUIPMENT::clear_items() {
  items_.Clear();
}
C_DB_EQUIPMENT::C_DB_EQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_EQUIPMENT)
}
C_DB_EQUIPMENT::C_DB_EQUIPMENT(const C_DB_EQUIPMENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  characterid_ = from.characterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_EQUIPMENT)
}

inline void C_DB_EQUIPMENT::SharedCtor() {
characterid_ = uint64_t{0u};
}

C_DB_EQUIPMENT::~C_DB_EQUIPMENT() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_EQUIPMENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_EQUIPMENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_EQUIPMENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_EQUIPMENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_EQUIPMENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  characterid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_EQUIPMENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.Equipment items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_EQUIPMENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_EQUIPMENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // repeated .Protocol.Equipment items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_EQUIPMENT)
  return target;
}

size_t C_DB_EQUIPMENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_EQUIPMENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.Equipment items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_EQUIPMENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_EQUIPMENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_EQUIPMENT::GetClassData() const { return &_class_data_; }

void C_DB_EQUIPMENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_EQUIPMENT *>(to)->MergeFrom(
      static_cast<const C_DB_EQUIPMENT &>(from));
}


void C_DB_EQUIPMENT::MergeFrom(const C_DB_EQUIPMENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_EQUIPMENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_EQUIPMENT::CopyFrom(const C_DB_EQUIPMENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_EQUIPMENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_EQUIPMENT::IsInitialized() const {
  return true;
}

void C_DB_EQUIPMENT::InternalSwap(C_DB_EQUIPMENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(characterid_, other->characterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_EQUIPMENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[16]);
}

// ===================================================================

class S_DB_EQUIPMENT::_Internal {
 public:
};

S_DB_EQUIPMENT::S_DB_EQUIPMENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_EQUIPMENT)
}
S_DB_EQUIPMENT::S_DB_EQUIPMENT(const S_DB_EQUIPMENT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_EQUIPMENT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_EQUIPMENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_EQUIPMENT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_EQUIPMENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[17]);
}

// ===================================================================

class C_DB_UPDATEPOS::_Internal {
 public:
  static const ::Protocol::ObjectInfo& objectinfo(const C_DB_UPDATEPOS* msg);
};

const ::Protocol::ObjectInfo&
C_DB_UPDATEPOS::_Internal::objectinfo(const C_DB_UPDATEPOS* msg) {
  return *msg->objectinfo_;
}
void C_DB_UPDATEPOS::clear_objectinfo() {
  if (GetArenaForAllocation() == nullptr && objectinfo_ != nullptr) {
    delete objectinfo_;
  }
  objectinfo_ = nullptr;
}
C_DB_UPDATEPOS::C_DB_UPDATEPOS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_UPDATEPOS)
}
C_DB_UPDATEPOS::C_DB_UPDATEPOS(const C_DB_UPDATEPOS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectinfo()) {
    objectinfo_ = new ::Protocol::ObjectInfo(*from.objectinfo_);
  } else {
    objectinfo_ = nullptr;
  }
  characterid_ = from.characterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_UPDATEPOS)
}

inline void C_DB_UPDATEPOS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objectinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&characterid_) -
    reinterpret_cast<char*>(&objectinfo_)) + sizeof(characterid_));
}

C_DB_UPDATEPOS::~C_DB_UPDATEPOS() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_UPDATEPOS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_UPDATEPOS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete objectinfo_;
}

void C_DB_UPDATEPOS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_UPDATEPOS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_UPDATEPOS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && objectinfo_ != nullptr) {
    delete objectinfo_;
  }
  objectinfo_ = nullptr;
  characterid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_UPDATEPOS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 characterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectInfo objectinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_UPDATEPOS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_UPDATEPOS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_characterid(), target);
  }

  // .Protocol.ObjectInfo objectinfo = 2;
  if (this->_internal_has_objectinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::objectinfo(this),
        _Internal::objectinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_UPDATEPOS)
  return target;
}

size_t C_DB_UPDATEPOS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_UPDATEPOS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo objectinfo = 2;
  if (this->_internal_has_objectinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectinfo_);
  }

  // uint64 characterid = 1;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_characterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_UPDATEPOS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_UPDATEPOS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_UPDATEPOS::GetClassData() const { return &_class_data_; }

void C_DB_UPDATEPOS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_UPDATEPOS *>(to)->MergeFrom(
      static_cast<const C_DB_UPDATEPOS &>(from));
}


void C_DB_UPDATEPOS::MergeFrom(const C_DB_UPDATEPOS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_UPDATEPOS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectinfo()) {
    _internal_mutable_objectinfo()->::Protocol::ObjectInfo::MergeFrom(from._internal_objectinfo());
  }
  if (from._internal_characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_UPDATEPOS::CopyFrom(const C_DB_UPDATEPOS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_UPDATEPOS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_UPDATEPOS::IsInitialized() const {
  return true;
}

void C_DB_UPDATEPOS::InternalSwap(C_DB_UPDATEPOS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_DB_UPDATEPOS, characterid_)
      + sizeof(C_DB_UPDATEPOS::characterid_)
      - PROTOBUF_FIELD_OFFSET(C_DB_UPDATEPOS, objectinfo_)>(
          reinterpret_cast<char*>(&objectinfo_),
          reinterpret_cast<char*>(&other->objectinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_UPDATEPOS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[18]);
}

// ===================================================================

class S_DB_UPDATEPOS::_Internal {
 public:
};

S_DB_UPDATEPOS::S_DB_UPDATEPOS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_UPDATEPOS)
}
S_DB_UPDATEPOS::S_DB_UPDATEPOS(const S_DB_UPDATEPOS& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_UPDATEPOS)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_UPDATEPOS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_UPDATEPOS::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_DB_UPDATEPOS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[19]);
}

// ===================================================================

class C_DB_PING::_Internal {
 public:
};

C_DB_PING::C_DB_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DB_PING)
}
C_DB_PING::C_DB_PING(const C_DB_PING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DB_PING)
}

inline void C_DB_PING::SharedCtor() {
timestamp_ = uint64_t{0u};
}

C_DB_PING::~C_DB_PING() {
  // @@protoc_insertion_point(destructor:Protocol.C_DB_PING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DB_PING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DB_PING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_DB_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DB_PING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DB_PING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DB_PING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DB_PING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DB_PING)
  return target;
}

size_t C_DB_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DB_PING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DB_PING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_DB_PING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DB_PING::GetClassData() const { return &_class_data_; }

void C_DB_PING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_DB_PING *>(to)->MergeFrom(
      static_cast<const C_DB_PING &>(from));
}


void C_DB_PING::MergeFrom(const C_DB_PING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DB_PING)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DB_PING::CopyFrom(const C_DB_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DB_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DB_PING::IsInitialized() const {
  return true;
}

void C_DB_PING::InternalSwap(C_DB_PING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DB_PING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[20]);
}

// ===================================================================

class S_DB_PING::_Internal {
 public:
};

S_DB_PING::S_DB_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DB_PING)
}
S_DB_PING::S_DB_PING(const S_DB_PING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DB_PING)
}

inline void S_DB_PING::SharedCtor() {
timestamp_ = uint64_t{0u};
}

S_DB_PING::~S_DB_PING() {
  // @@protoc_insertion_point(destructor:Protocol.S_DB_PING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DB_PING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DB_PING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DB_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DB_PING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DB_PING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DB_PING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DB_PING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DB_PING)
  return target;
}

size_t S_DB_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DB_PING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DB_PING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DB_PING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DB_PING::GetClassData() const { return &_class_data_; }

void S_DB_PING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DB_PING *>(to)->MergeFrom(
      static_cast<const S_DB_PING &>(from));
}


void S_DB_PING::MergeFrom(const S_DB_PING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DB_PING)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DB_PING::CopyFrom(const S_DB_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DB_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DB_PING::IsInitialized() const {
  return true;
}

void S_DB_PING::InternalSwap(S_DB_PING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DB_PING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_DB_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_DB_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_GAINEXP*
Arena::CreateMaybeMessage< ::Protocol::C_DB_GAINEXP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_GAINEXP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_GAINEXP*
Arena::CreateMaybeMessage< ::Protocol::S_DB_GAINEXP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_GAINEXP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_GAINGOLD*
Arena::CreateMaybeMessage< ::Protocol::C_DB_GAINGOLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_GAINGOLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_GAINGOLD*
Arena::CreateMaybeMessage< ::Protocol::S_DB_GAINGOLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_GAINGOLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_LOADEQUIPMENT*
Arena::CreateMaybeMessage< ::Protocol::C_DB_LOADEQUIPMENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_LOADEQUIPMENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_LOADEQUIPMENT*
Arena::CreateMaybeMessage< ::Protocol::S_DB_LOADEQUIPMENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_LOADEQUIPMENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_LOADINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::C_DB_LOADINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_LOADINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_LOADINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::S_DB_LOADINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_LOADINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_DELETEINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::C_DB_DELETEINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_DELETEINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_DELETEINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::S_DB_DELETEINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_DELETEINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_UPDATEINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::C_DB_UPDATEINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_UPDATEINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_UPDATEINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::S_DB_UPDATEINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_UPDATEINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_INSERTINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::C_DB_INSERTINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_INSERTINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_INSERTINVENTORY*
Arena::CreateMaybeMessage< ::Protocol::S_DB_INSERTINVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_INSERTINVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_EQUIPMENT*
Arena::CreateMaybeMessage< ::Protocol::C_DB_EQUIPMENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_EQUIPMENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_EQUIPMENT*
Arena::CreateMaybeMessage< ::Protocol::S_DB_EQUIPMENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_EQUIPMENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_UPDATEPOS*
Arena::CreateMaybeMessage< ::Protocol::C_DB_UPDATEPOS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_UPDATEPOS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_UPDATEPOS*
Arena::CreateMaybeMessage< ::Protocol::S_DB_UPDATEPOS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_UPDATEPOS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DB_PING*
Arena::CreateMaybeMessage< ::Protocol::C_DB_PING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DB_PING >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DB_PING*
Arena::CreateMaybeMessage< ::Protocol::S_DB_PING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DB_PING >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
