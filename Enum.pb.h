// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_CREATURE = 1,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = OBJECT_TYPE_NONE;
constexpr ObjectType ObjectType_MAX = OBJECT_TYPE_CREATURE;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum CreatureType : int {
  CREATURE_TYPE_NONE = 0,
  CREATURE_TYPE_PLAYER = 1,
  CREATURE_TYPE_MONSTER = 2,
  CREATURE_TYPE_NPC = 3,
  CreatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreatureType_IsValid(int value);
constexpr CreatureType CreatureType_MIN = CREATURE_TYPE_NONE;
constexpr CreatureType CreatureType_MAX = CREATURE_TYPE_NPC;
constexpr int CreatureType_ARRAYSIZE = CreatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor();
template<typename T>
inline const std::string& CreatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatureType_descriptor(), enum_t_value);
}
inline bool CreatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatureType>(
    CreatureType_descriptor(), name, value);
}
enum PlayerType : int {
  PLAYER_TYPE_NONE = 0,
  PLAYER_TYPE_KNIGHT = 1,
  PLAYER_TYPE_MAGE = 2,
  PLAYER_TYPE_ARCHER = 3,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerType_IsValid(int value);
constexpr PlayerType PlayerType_MIN = PLAYER_TYPE_NONE;
constexpr PlayerType PlayerType_MAX = PLAYER_TYPE_ARCHER;
constexpr int PlayerType_ARRAYSIZE = PlayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor();
template<typename T>
inline const std::string& PlayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerType_descriptor(), enum_t_value);
}
inline bool PlayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerType>(
    PlayerType_descriptor(), name, value);
}
enum MoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_RUN = 2,
  MOVE_STATE_JUMP = 3,
  MOVE_STATE_SKIL = 4,
  MoveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveState_IsValid(int value);
constexpr MoveState MoveState_MIN = MOVE_STATE_NONE;
constexpr MoveState MoveState_MAX = MOVE_STATE_SKIL;
constexpr int MoveState_ARRAYSIZE = MoveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor();
template<typename T>
inline const std::string& MoveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveState_descriptor(), enum_t_value);
}
inline bool MoveState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveState>(
    MoveState_descriptor(), name, value);
}
enum LevelType : int {
  LEVEL_TYPE_NONE = 0,
  LEVEL_TYPE_BASE = 1,
  LEVEL_TYPE_TEST = 2,
  LEVEL_TYPE_CHAOS = 3,
  LevelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LevelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LevelType_IsValid(int value);
constexpr LevelType LevelType_MIN = LEVEL_TYPE_NONE;
constexpr LevelType LevelType_MAX = LEVEL_TYPE_CHAOS;
constexpr int LevelType_ARRAYSIZE = LevelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelType_descriptor();
template<typename T>
inline const std::string& LevelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LevelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LevelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LevelType_descriptor(), enum_t_value);
}
inline bool LevelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LevelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LevelType>(
    LevelType_descriptor(), name, value);
}
enum MonsterID : int {
  MONSTER_ID_GOBLIN = 0,
  MonsterID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterID_IsValid(int value);
constexpr MonsterID MonsterID_MIN = MONSTER_ID_GOBLIN;
constexpr MonsterID MonsterID_MAX = MONSTER_ID_GOBLIN;
constexpr int MonsterID_ARRAYSIZE = MonsterID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterID_descriptor();
template<typename T>
inline const std::string& MonsterID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterID_descriptor(), enum_t_value);
}
inline bool MonsterID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterID>(
    MonsterID_descriptor(), name, value);
}
enum SkillID : int {
  SKILL_NONE = 0,
  SKILL_BASE_DEFAULT_ATTACK = 1000,
  SkillID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillID_IsValid(int value);
constexpr SkillID SkillID_MIN = SKILL_NONE;
constexpr SkillID SkillID_MAX = SKILL_BASE_DEFAULT_ATTACK;
constexpr int SkillID_ARRAYSIZE = SkillID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillID_descriptor();
template<typename T>
inline const std::string& SkillID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillID_descriptor(), enum_t_value);
}
inline bool SkillID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillID>(
    SkillID_descriptor(), name, value);
}
enum LoginMessage : int {
  LOGIN_NONE = 0,
  LOGIN_SUCCESS = 1,
  LOGIN_ERROR_ID = 2,
  LOGIN_ERROR_ID_DUPLE = 3,
  LOGIN_ERROR_PASSWORD = 4,
  LoginMessage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginMessage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LoginMessage_IsValid(int value);
constexpr LoginMessage LoginMessage_MIN = LOGIN_NONE;
constexpr LoginMessage LoginMessage_MAX = LOGIN_ERROR_PASSWORD;
constexpr int LoginMessage_ARRAYSIZE = LoginMessage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginMessage_descriptor();
template<typename T>
inline const std::string& LoginMessage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginMessage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginMessage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginMessage_descriptor(), enum_t_value);
}
inline bool LoginMessage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginMessage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginMessage>(
    LoginMessage_descriptor(), name, value);
}
enum CreateCharacterMessage : int {
  CHARACTER_NONE = 0,
  CHARACTER_SUCCESS = 1,
  CHARACTER_ERROR_ID_DUPLE = 2,
  CreateCharacterMessage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateCharacterMessage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateCharacterMessage_IsValid(int value);
constexpr CreateCharacterMessage CreateCharacterMessage_MIN = CHARACTER_NONE;
constexpr CreateCharacterMessage CreateCharacterMessage_MAX = CHARACTER_ERROR_ID_DUPLE;
constexpr int CreateCharacterMessage_ARRAYSIZE = CreateCharacterMessage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateCharacterMessage_descriptor();
template<typename T>
inline const std::string& CreateCharacterMessage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateCharacterMessage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateCharacterMessage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateCharacterMessage_descriptor(), enum_t_value);
}
inline bool CreateCharacterMessage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateCharacterMessage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateCharacterMessage>(
    CreateCharacterMessage_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreatureType>() {
  return ::Protocol::CreatureType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerType>() {
  return ::Protocol::PlayerType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MoveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveState>() {
  return ::Protocol::MoveState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::LevelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LevelType>() {
  return ::Protocol::LevelType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MonsterID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MonsterID>() {
  return ::Protocol::MonsterID_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SkillID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SkillID>() {
  return ::Protocol::SkillID_descriptor();
}
template <> struct is_proto_enum< ::Protocol::LoginMessage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LoginMessage>() {
  return ::Protocol::LoginMessage_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreateCharacterMessage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreateCharacterMessage>() {
  return ::Protocol::CreateCharacterMessage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
